diff --git a/.dockerignore b/.dockerignore
new file mode 100644
index 0000000..63c9c34
--- /dev/null
+++ b/.dockerignore
@@ -0,0 +1,5 @@
+.git
+node_modules
+packages
+!packages/backend/dist
+plugins
diff --git a/.gitignore b/.gitignore
index 5f5cc73..4adebc5 100644
--- a/.gitignore
+++ b/.gitignore
@@ -32,2 +32,5 @@ site
 # Local configuration files
-*.local.yaml
\ No newline at end of file
+*.local.yaml
+
+# Sensitive credentials
+*-credentials.yaml
diff --git a/app-config.yaml b/app-config.yaml
index 19f3819..6b97bb0 100644
--- a/app-config.yaml
+++ b/app-config.yaml
@@ -25,4 +25,3 @@ integrations:
     - host: github.com
-      token:
-        $env: GITHUB_TOKEN
+      token: ${GITHUB_TOKEN}
     ### Example for how to add your GitHub Enterprise instance using the API:
@@ -30,4 +29,3 @@ integrations:
     #   apiBaseUrl: https://ghe.example.net/api/v3
-    #   token:
-    #     $env: GHE_TOKEN
+    #   token: ${GHE_TOKEN}
 
@@ -38,10 +36,12 @@ proxy:
 
+# Reference documentation http://backstage.io/docs/features/techdocs/configuration
+# Note: After experimenting with basic setup, use CI/CD to generate docs
+# and an external cloud storage when deploying TechDocs for production use-case.
+# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
 techdocs:
-  requestUrl: http://localhost:7000/api/techdocs
-  storageUrl: http://localhost:7000/api/techdocs/static/docs
-  builder: 'local'
+  builder: 'local' # Alternatives - 'external'
   generators:
-    techdocs: 'docker'
+    techdocs: 'docker' # Alternatives - 'local'
   publisher:
-    type: 'local'
+    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.
 
@@ -53,4 +53,3 @@ scaffolder:
   github:
-    token:
-      $env: GITHUB_TOKEN
+    token: ${GITHUB_TOKEN}
     visibility: public # or 'internal' or 'private'
@@ -59,3 +58,3 @@ catalog:
   rules:
-    - allow: [Component, API, Group, User, Template, Location]
+    - allow: [Component, System, API, Group, User, Template, Location]
   locations:
@@ -65,2 +64,6 @@ catalog:
 
+    # Backstage example systems
+    - type: url
+      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-systems.yaml
+
     # Backstage example APIs
@@ -69,4 +72,10 @@ catalog:
 
+    # Backstage example organization groups
+    - type: url
+      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme/org.yaml
+      rules:
+        - allow: [Group, User]
+
     # Backstage example templates
-    - type: github
+    - type: url
       target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/react-ssr-template/template.yaml
@@ -74,3 +83,3 @@ catalog:
         - allow: [Template]
-    - type: github
+    - type: url
       target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/springboot-grpc-template/template.yaml
@@ -78,3 +87,3 @@ catalog:
         - allow: [Template]
-    - type: github
+    - type: url
       target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/create-react-app/template.yaml
@@ -82,3 +91,3 @@ catalog:
         - allow: [Template]
-    - type: github
+    - type: url
       target: https://github.com/spotify/cookiecutter-golang/blob/master/template.yaml
@@ -86,3 +95,3 @@ catalog:
         - allow: [Template]
-    - type: github
+    - type: url
       target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/docs-template/template.yaml
diff --git a/catalog-info.yaml b/catalog-info.yaml
index 41794b4..841a480 100644
--- a/catalog-info.yaml
+++ b/catalog-info.yaml
@@ -8,3 +8,3 @@ metadata:
     # github.com/project-slug: backstage/backstage
-    # backstage.io/techdocs-ref: github:https://github.com/backstage/backstage.git
+    # backstage.io/techdocs-ref: url:https://github.com/backstage/backstage
 spec:
diff --git a/package.json b/package.json
index a6bc053..9d460fd 100644
--- a/package.json
+++ b/package.json
@@ -8,2 +8,3 @@
   "scripts": {
+    "dev": "concurrently \"yarn start\" \"yarn start-backend\"",
     "start": "yarn workspace app start",
@@ -23,2 +24,6 @@
   },
+  "resolutions": {
+    "graphql-language-service-interface": "2.8.2",
+    "graphql-language-service-parser": "1.9.0"
+  },
   "workspaces": {
@@ -30,5 +35,6 @@
   "devDependencies": {
-    "@backstage/cli": "^0.4.6",
+    "@backstage/cli": "^0.6.8",
     "@spotify/prettier-config": "^7.0.0",
-    "lerna": "^3.20.2",
+    "concurrently": "^6.0.0",
+    "lerna": "^4.0.0",
     "prettier": "^1.19.1"
@@ -47,3 +53,3 @@
     "transformModules": [
-      "@kyma-project/asyncapi-react"
+      "@asyncapi/react-component"
     ]
diff --git a/packages/app/package.json b/packages/app/package.json
index ba052c9..b8b49b2 100644
--- a/packages/app/package.json
+++ b/packages/app/package.json
@@ -6,19 +6,21 @@
   "dependencies": {
+    "@backstage/catalog-model": "^0.7.7",
+    "@backstage/cli": "^0.6.8",
+    "@backstage/core": "^0.7.5",
+    "@backstage/integration-react": "^0.1.1",
+    "@backstage/plugin-api-docs": "^0.4.11",
+    "@backstage/plugin-catalog": "^0.5.4",
+    "@backstage/plugin-catalog-import": "^0.5.2",
+    "@backstage/plugin-catalog-react": "^0.1.4",
+    "@backstage/plugin-github-actions": "^0.4.3",
+    "@backstage/plugin-org": "^0.3.12",
+    "@backstage/plugin-scaffolder": "^0.9.0",
+    "@backstage/plugin-search": "^0.3.4",
+    "@backstage/plugin-tech-radar": "^0.3.9",
+    "@backstage/plugin-techdocs": "^0.7.2",
+    "@backstage/plugin-user-settings": "^0.2.9",
+    "@backstage/test-utils": "^0.1.10",
+    "@backstage/theme": "^0.2.5",
     "@material-ui/core": "^4.11.0",
     "@material-ui/icons": "^4.9.1",
-    "@backstage/cli": "^0.4.6",
-    "@backstage/core": "^0.4.4",
-    "@backstage/plugin-api-docs": "^0.4.2",
-    "@backstage/plugin-catalog": "^0.2.11",
-    "@backstage/plugin-catalog-import": "^0.3.4",
-    "@backstage/plugin-scaffolder": "^0.3.6",
-    "@backstage/plugin-techdocs": "^0.5.3",
-    "@backstage/catalog-model": "^0.6.1",
-    "@backstage/plugin-circleci": "^0.2.5",
-    "@backstage/plugin-tech-radar": "^0.3.2",
-    "@backstage/plugin-github-actions": "^0.2.7",
-    "@backstage/plugin-user-settings": "^0.2.3",
-    "@backstage/plugin-search": "^0.2.5",
-    "@backstage/test-utils": "^0.1.6",
-    "@backstage/theme": "^0.2.2",
     "history": "^5.0.0",
@@ -35,3 +37,3 @@
     "@types/jest": "^26.0.7",
-    "@types/node": "^12.0.0",
+    "@types/node": "^14.14.32",
     "@types/react-dom": "^16.9.8",
diff --git a/packages/app/public/index.html b/packages/app/public/index.html
index ea9208c..5653173 100644
--- a/packages/app/public/index.html
+++ b/packages/app/public/index.html
@@ -50,2 +50,18 @@
     <title><%= app.title %></title>
+    <% if (app.googleAnalyticsTrackingId && typeof app.googleAnalyticsTrackingId
+    === 'string') { %>
+    <script
+      async
+      src="https://www.googletagmanager.com/gtag/js?id=<%= app.googleAnalyticsTrackingId %>"
+    ></script>
+    <script>
+      window.dataLayer = window.dataLayer || [];
+      function gtag() {
+        dataLayer.push(arguments);
+      }
+      gtag('js', new Date());
+
+      gtag('config', '<%= app.googleAnalyticsTrackingId %>');
+    </script>
+    <% } %>
   </head>
diff --git a/packages/app/src/App.test.tsx b/packages/app/src/App.test.tsx
index 21a2eaa..82bc479 100644
--- a/packages/app/src/App.test.tsx
+++ b/packages/app/src/App.test.tsx
@@ -6,5 +6,5 @@ describe('App', () => {
   it('should render', async () => {
-    Object.defineProperty(process.env, 'APP_CONFIG', {
-      configurable: true,
-      value: [
+    process.env = {
+      NODE_ENV: 'test',
+      APP_CONFIG: [
         {
@@ -19,4 +19,4 @@ describe('App', () => {
         },
-      ],
-    });
+      ] as any,
+    };
 
diff --git a/packages/app/src/App.tsx b/packages/app/src/App.tsx
index 693e66e..1ed7aa0 100644
--- a/packages/app/src/App.tsx
+++ b/packages/app/src/App.tsx
@@ -1,20 +1,25 @@
 import React from 'react';
+import { Navigate, Route } from 'react-router';
 import {
-  createApp,
   AlertDisplay,
+  createApp,
+  FlatRoutes,
   OAuthRequestDialog,
-  SidebarPage,
-  createRouteRef,
 } from '@backstage/core';
+import { apiDocsPlugin, ApiExplorerPage } from '@backstage/plugin-api-docs';
+import {
+  CatalogEntityPage,
+  CatalogIndexPage,
+  catalogPlugin,
+} from '@backstage/plugin-catalog';
+import {CatalogImportPage, catalogImportPlugin} from '@backstage/plugin-catalog-import';
+import { ScaffolderPage, scaffolderPlugin } from '@backstage/plugin-scaffolder';
+import { SearchPage } from '@backstage/plugin-search';
+import { TechRadarPage } from '@backstage/plugin-tech-radar';
+import { TechdocsPage } from '@backstage/plugin-techdocs';
+import { UserSettingsPage } from '@backstage/plugin-user-settings';
 import { apis } from './apis';
+import { entityPage } from './components/catalog/EntityPage';
+import { Root } from './components/Root';
 import * as plugins from './plugins';
-import { AppSidebar } from './sidebar';
-import { Route, Routes, Navigate } from 'react-router';
-import { Router as CatalogRouter } from '@backstage/plugin-catalog';
-import { Router as DocsRouter } from '@backstage/plugin-techdocs';
-import { Router as ImportComponentRouter } from '@backstage/plugin-catalog-import';
-import { Router as TechRadarRouter } from '@backstage/plugin-tech-radar';
-import { SearchPage as SearchRouter } from '@backstage/plugin-search';
-
-import { EntityPage } from './components/catalog/EntityPage';
 
@@ -23,2 +28,13 @@ const app = createApp({
   plugins: Object.values(plugins),
+  bindRoutes({ bind }) {
+    bind(catalogPlugin.externalRoutes, {
+      createComponent: scaffolderPlugin.routes.root,
+    });
+    bind(apiDocsPlugin.externalRoutes, {
+      createComponent: scaffolderPlugin.routes.root,
+    });
+    bind(scaffolderPlugin.externalRoutes, {
+      registerComponent: catalogImportPlugin.routes.importPage,
+    });
+  },
 });
@@ -27,9 +43,25 @@ const AppProvider = app.getProvider();
 const AppRouter = app.getRouter();
-const deprecatedAppRoutes = app.getRoutes();
-
-const catalogRouteRef = createRouteRef({
-  path: '/catalog',
-  title: 'Service Catalog',
-});
 
+const routes = (
+  <FlatRoutes>
+    <Navigate key="/" to="/catalog" />
+    <Route path="/catalog" element={<CatalogIndexPage />} />
+    <Route
+      path="/catalog/:namespace/:kind/:name"
+      element={<CatalogEntityPage />}
+    >
+      {entityPage}
+    </Route>
+    <Route path="/docs" element={<TechdocsPage />} />
+    <Route path="/create" element={<ScaffolderPage />} />
+    <Route path="/api-docs" element={<ApiExplorerPage />} />
+    <Route
+      path="/tech-radar"
+      element={<TechRadarPage width={1500} height={800} />}
+    />
+    <Route path="/catalog-import" element={<CatalogImportPage />} />
+    <Route path="/search" element={<SearchPage />} />
+    <Route path="/settings" element={<UserSettingsPage />} />
+  </FlatRoutes>
+);
 
@@ -40,26 +72,3 @@ const App = () => (
     <AppRouter>
-      <SidebarPage>
-        <AppSidebar />
-        <Routes>
-          <Navigate key="/" to="/catalog" />
-          <Route
-            path="/catalog/*"
-            element={<CatalogRouter EntityPage={EntityPage} />}
-          />
-          <Route path="/docs/*" element={<DocsRouter />} />
-          <Route
-            path="/tech-radar"
-            element={<TechRadarRouter width={1500} height={800} />}
-          />
-          <Route
-            path="/catalog-import"
-            element={<ImportComponentRouter catalogRouteRef={catalogRouteRef} />}
-          />
-          <Route
-            path="/search"
-            element={<SearchRouter/>}
-          />
-          {deprecatedAppRoutes}
-        </Routes>
-      </SidebarPage>
+      <Root>{routes}</Root>
     </AppRouter>
diff --git a/packages/app/src/apis.ts b/packages/app/src/apis.ts
index 24b22a8..d803416 100644
--- a/packages/app/src/apis.ts
+++ b/packages/app/src/apis.ts
@@ -1 +1,14 @@
-export const apis = [];
+import {
+  AnyApiFactory, configApiRef, createApiFactory
+} from '@backstage/core';
+import {
+  ScmIntegrationsApi, scmIntegrationsApiRef
+} from '@backstage/integration-react';
+
+export const apis: AnyApiFactory[] = [
+  createApiFactory({
+    api: scmIntegrationsApiRef,
+    deps: { configApi: configApiRef },
+    factory: ({ configApi }) => ScmIntegrationsApi.fromConfig(configApi),
+  }),
+];
diff --git a/packages/app/src/LogoFull.tsx b/packages/app/src/components/Root/LogoFull.tsx
similarity index 100%
rename from packages/app/src/LogoFull.tsx
rename to packages/app/src/components/Root/LogoFull.tsx
diff --git a/packages/app/src/LogoIcon.tsx b/packages/app/src/components/Root/LogoIcon.tsx
similarity index 100%
rename from packages/app/src/LogoIcon.tsx
rename to packages/app/src/components/Root/LogoIcon.tsx
diff --git a/packages/app/src/sidebar.tsx b/packages/app/src/components/Root/Root.tsx
similarity index 50%
rename from packages/app/src/sidebar.tsx
rename to packages/app/src/components/Root/Root.tsx
index 55fa056..9c07e0c 100644
--- a/packages/app/src/sidebar.tsx
+++ b/packages/app/src/components/Root/Root.tsx
@@ -1,43 +1,39 @@
-import React, { useContext } from 'react';
+/*
+ * Copyright 2020 Spotify AB
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import React, { useContext, PropsWithChildren } from 'react';
+import { Link, makeStyles } from '@material-ui/core';
 import HomeIcon from '@material-ui/icons/Home';
-import LibraryBooks from '@material-ui/icons/LibraryBooks';
 import ExtensionIcon from '@material-ui/icons/Extension';
-import CreateComponentIcon from '@material-ui/icons/AddCircleOutline';
 import MapIcon from '@material-ui/icons/MyLocation';
-import { Link, makeStyles } from '@material-ui/core';
-import { NavLink } from 'react-router-dom';
+import LibraryBooks from '@material-ui/icons/LibraryBooks';
+import CreateComponentIcon from '@material-ui/icons/AddCircleOutline';
 import LogoFull from './LogoFull';
 import LogoIcon from './LogoIcon';
-import { Settings as SidebarSettings } from '@backstage/plugin-user-settings';
-
 import {
   Sidebar,
-  SidebarItem,
-  SidebarDivider,
+  SidebarPage,
   sidebarConfig,
   SidebarContext,
+  SidebarItem,
+  SidebarDivider,
   SidebarSpace,
 } from '@backstage/core';
+import { NavLink } from 'react-router-dom';
+import { Settings as SidebarSettings } from '@backstage/plugin-user-settings';
 import { SidebarSearch } from '@backstage/plugin-search';
 
-export const AppSidebar = () => (
-  <Sidebar>
-    <SidebarLogo />
-    <SidebarSearch />
-    <SidebarDivider />
-    {/* Global nav, not org-specific */}
-    <SidebarItem icon={HomeIcon} to="./" text="Home" />
-    <SidebarItem icon={ExtensionIcon} to="api-docs" text="APIs" />
-    <SidebarItem icon={LibraryBooks} to="/docs" text="Docs" />
-    <SidebarItem icon={CreateComponentIcon} to="create" text="Create..." />
-    <SidebarDivider />
-    <SidebarItem icon={MapIcon} to="tech-radar" text="Tech Radar" />
-    {/* End global nav */}
-    <SidebarDivider />
-    <SidebarSpace />
-    <SidebarDivider />
-    <SidebarSettings />
-  </Sidebar>
-);
-
 const useSidebarLogoStyles = makeStyles({
@@ -74 +70,23 @@ const SidebarLogo = () => {
 };
+
+export const Root = ({ children }: PropsWithChildren<{}>) => (
+  <SidebarPage>
+    <Sidebar>
+      <SidebarLogo />
+      <SidebarSearch />
+      <SidebarDivider />
+      {/* Global nav, not org-specific */}
+      <SidebarItem icon={HomeIcon} to="/catalog" text="Home" />
+      <SidebarItem icon={ExtensionIcon} to="api-docs" text="APIs" />
+      <SidebarItem icon={LibraryBooks} to="docs" text="Docs" />
+      <SidebarItem icon={CreateComponentIcon} to="create" text="Create..." />
+      {/* End global nav */}
+      <SidebarDivider />
+      <SidebarItem icon={MapIcon} to="tech-radar" text="Tech Radar" />
+      <SidebarSpace />
+      <SidebarDivider />
+      <SidebarSettings />
+    </Sidebar>
+    {children}
+  </SidebarPage>
+);
diff --git a/packages/app/src/components/Root/index.ts b/packages/app/src/components/Root/index.ts
new file mode 100644
index 0000000..ab65cb2
--- /dev/null
+++ b/packages/app/src/components/Root/index.ts
@@ -0,0 +1,17 @@
+/*
+ * Copyright 2020 Spotify AB
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+export { Root } from './Root';
diff --git a/packages/app/src/components/catalog/EntityPage.tsx b/packages/app/src/components/catalog/EntityPage.tsx
index b5e384f..f1aba46 100644
--- a/packages/app/src/components/catalog/EntityPage.tsx
+++ b/packages/app/src/components/catalog/EntityPage.tsx
@@ -15,59 +15,66 @@
  */
-import { ApiEntity, Entity } from '@backstage/catalog-model';
-import { WarningPanel } from '@backstage/core';
+import React from 'react';
+import { Button, Grid } from '@material-ui/core';
+import { EmptyState } from '@backstage/core';
 import {
-  ApiDefinitionCard,
-  ConsumedApisCard, 
-  ConsumingComponentsCard, 
-  ProvidedApisCard, 
-  ProvidingComponentsCard
+  EntityApiDefinitionCard,
+  EntityConsumedApisCard,
+  EntityConsumingComponentsCard,
+  EntityHasApisCard,
+  EntityProvidedApisCard,
+  EntityProvidingComponentsCard,
 } from '@backstage/plugin-api-docs';
 import {
-  AboutCard, EntityPageLayout,
-  useEntity
+  EntityAboutCard,
+  EntitySystemDiagramCard,
+  EntityHasComponentsCard,
+  EntityHasSystemsCard,
+  EntityLayout,
+  EntitySwitch,
+  isComponentType,
+  isKind,
 } from '@backstage/plugin-catalog';
 import {
-  isPluginApplicableToEntity as isCircleCIAvailable, Router as CircleCIRouter
-} from '@backstage/plugin-circleci';
-import {
-  isPluginApplicableToEntity as isGitHubActionsAvailable, Router as GitHubActionsRouter
+  isGithubActionsAvailable,
+  EntityGithubActionsContent,
 } from '@backstage/plugin-github-actions';
-import { EmbeddedDocsRouter as DocsRouter } from '@backstage/plugin-techdocs';
-import { Grid } from '@material-ui/core';
-import React from 'react';
-
+import {
+  EntityUserProfileCard,
+  EntityGroupProfileCard,
+  EntityMembersListCard,
+  EntityOwnershipCard,
+} from '@backstage/plugin-org';
+import { EntityTechdocsContent } from '@backstage/plugin-techdocs';
 
-const CICDSwitcher = ({ entity }: { entity: Entity }) => {
-  // This component is just an example of how you can implement your company's logic in entity page.
+const cicdContent = (
+  // This is an example of how you can implement your company's logic in entity page.
   // You can for example enforce that all components of type 'service' should use GitHubActions
-  switch (true) {
-    case isGitHubActionsAvailable(entity):
-      return <GitHubActionsRouter entity={entity} />;
-    case isCircleCIAvailable(entity):
-      return <CircleCIRouter entity={entity} />;
-    default:
-      return (
-        <WarningPanel title="CI/CD switcher:">
-          No CI/CD is available for this entity. Check corresponding
-          annotations!
-        </WarningPanel>
-      );
-  }
-};
-
-const OverviewContent = ({ entity }: { entity: Entity }) => (
-  <Grid container spacing={3} alignItems="stretch">
-    <Grid item>
-      <AboutCard entity={entity} variant="gridItem" />
-    </Grid>
-  </Grid>
+  <EntitySwitch>
+    <EntitySwitch.Case if={isGithubActionsAvailable}>
+      <EntityGithubActionsContent />
+    </EntitySwitch.Case>
+
+    <EntitySwitch.Case>
+      <EmptyState
+        title="No CI/CD available for this entity"
+        missing="info"
+        description="You need to add an annotation to your component if you want to enable CI/CD for it. You can read more about annotations in Backstage by clicking the button below."
+        action={
+          <Button
+            variant="contained"
+            color="primary"
+            href="https://backstage.io/docs/features/software-catalog/well-known-annotations"
+          >
+            Read more
+          </Button>
+        }
+      />
+    </EntitySwitch.Case>
+  </EntitySwitch>
 );
 
-const ComponentApisContent = ({ entity }: { entity: Entity }) => (
+const overviewContent = (
   <Grid container spacing={3} alignItems="stretch">
     <Grid item md={6}>
-      <ProvidedApisCard entity={entity} />
-    </Grid>
-    <Grid item md={6}>
-      <ConsumedApisCard entity={entity} />
+      <EntityAboutCard variant="gridItem" />
     </Grid>
@@ -76,123 +83,180 @@ const ComponentApisContent = ({ entity }: { entity: Entity }) => (
 
-const ServiceEntityPage = ({ entity }: { entity: Entity }) => (
-  <EntityPageLayout>
-    <EntityPageLayout.Content
-      path="/"
-      title="Overview"
-      element={<OverviewContent entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/ci-cd/*"
-      title="CI/CD"
-      element={<CICDSwitcher entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/api/*"
-      title="API"
-      element={<ComponentApisContent entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/docs/*"
-      title="Docs"
-      element={<DocsRouter entity={entity} />}
-    />
-  </EntityPageLayout>
+const serviceEntityPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      {overviewContent}
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/ci-cd" title="CI/CD">
+      {cicdContent}
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/api" title="API">
+      <Grid container spacing={3} alignItems="stretch">
+        <Grid item md={6}>
+          <EntityProvidedApisCard />
+        </Grid>
+        <Grid item md={6}>
+          <EntityConsumedApisCard />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/docs" title="Docs">
+      <EntityTechdocsContent />
+    </EntityLayout.Route>
+  </EntityLayout>
 );
 
-const WebsiteEntityPage = ({ entity }: { entity: Entity }) => (
-  <EntityPageLayout>
-    <EntityPageLayout.Content
-      path="/"
-      title="Overview"
-      element={<OverviewContent entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/ci-cd/*"
-      title="CI/CD"
-      element={<CICDSwitcher entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/docs/*"
-      title="Docs"
-      element={<DocsRouter entity={entity} />}
-    />
-  </EntityPageLayout>
+const websiteEntityPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      {overviewContent}
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/ci-cd" title="CI/CD">
+      {cicdContent}
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/docs" title="Docs">
+      <EntityTechdocsContent />
+    </EntityLayout.Route>
+  </EntityLayout>
 );
 
-const DefaultEntityPage = ({ entity }: { entity: Entity }) => (
-  <EntityPageLayout>
-    <EntityPageLayout.Content
-      path="/*"
-      title="Overview"
-      element={<OverviewContent entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/docs/*"
-      title="Docs"
-      element={<DocsRouter entity={entity} />}
-    />
-  </EntityPageLayout>
+const defaultEntityPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      {overviewContent}
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/docs" title="Docs">
+      <EntityTechdocsContent />
+    </EntityLayout.Route>
+  </EntityLayout>
 );
 
-export const ComponentEntityPage = ({ entity }: { entity: Entity }) => {
-  switch (entity?.spec?.type) {
-    case 'service':
-      return <ServiceEntityPage entity={entity} />;
-    case 'website':
-      return <WebsiteEntityPage entity={entity} />;
-    default:
-      return <DefaultEntityPage entity={entity} />;
-  }
-};
-
-const ApiOverviewContent = ({ entity }: { entity: Entity }) => (
-  <Grid container spacing={3}>
-    <Grid item md={6}>
-      <AboutCard entity={entity} />
-    </Grid>
-    <Grid container item md={12}>
-      <Grid item md={6}>
-        <ProvidingComponentsCard entity={entity} />
+const componentPage = (
+  <EntitySwitch>
+    <EntitySwitch.Case if={isComponentType('service')}>
+      {serviceEntityPage}
+    </EntitySwitch.Case>
+
+    <EntitySwitch.Case if={isComponentType('website')}>
+      {websiteEntityPage}
+    </EntitySwitch.Case>
+
+    <EntitySwitch.Case>{defaultEntityPage}</EntitySwitch.Case>
+  </EntitySwitch>
+);
+
+const apiPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      <Grid container spacing={3}>
+        <Grid item md={6}>
+          <EntityAboutCard />
+        </Grid>
+        <Grid container item md={12}>
+          <Grid item md={6}>
+            <EntityProvidingComponentsCard />
+          </Grid>
+          <Grid item md={6}>
+            <EntityConsumingComponentsCard />
+          </Grid>
+        </Grid>
       </Grid>
-      <Grid item md={6}>
-        <ConsumingComponentsCard entity={entity} />
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/definition" title="Definition">
+      <Grid container spacing={3}>
+        <Grid item xs={12}>
+          <EntityApiDefinitionCard />
+        </Grid>
       </Grid>
-    </Grid>
-  </Grid>
+    </EntityLayout.Route>
+  </EntityLayout>
 );
 
-const ApiDefinitionContent = ({ entity }: { entity: ApiEntity }) => (
-  <Grid container spacing={3}>
-    <Grid item xs={12}>
-      <ApiDefinitionCard apiEntity={entity} />
-    </Grid>
-  </Grid>
+const userPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      <Grid container spacing={3}>
+        <Grid item xs={12} md={6}>
+          <EntityUserProfileCard variant="gridItem" />
+        </Grid>
+        <Grid item xs={12} md={6}>
+          <EntityOwnershipCard variant="gridItem" />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+  </EntityLayout>
 );
 
-const ApiEntityPage = ({ entity }: { entity: Entity }) => (
-  <EntityPageLayout>
-    <EntityPageLayout.Content
-      path="/*"
-      title="Overview"
-      element={<ApiOverviewContent entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/definition/*"
-      title="Definition"
-      element={<ApiDefinitionContent entity={entity as ApiEntity} />}
-    />
-  </EntityPageLayout>
+const groupPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      <Grid container spacing={3}>
+        <Grid item xs={12} md={6}>
+          <EntityGroupProfileCard variant="gridItem" />
+        </Grid>
+        <Grid item xs={12} md={6}>
+          <EntityOwnershipCard variant="gridItem" />
+        </Grid>
+        <Grid item xs={12}>
+          <EntityMembersListCard />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/diagram" title="Diagram">
+      <EntitySystemDiagramCard />
+    </EntityLayout.Route>
+  </EntityLayout>
+);
+
+const systemPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      <Grid container spacing={3} alignItems="stretch">
+        <Grid item md={6}>
+          <EntityAboutCard variant="gridItem" />
+        </Grid>
+        <Grid item md={6}>
+          <EntityHasComponentsCard variant="gridItem" />
+        </Grid>
+        <Grid item md={6}>
+          <EntityHasApisCard variant="gridItem" />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+  </EntityLayout>
 );
 
-export const EntityPage = () => {
-  const { entity } = useEntity();
-
-  switch (entity?.kind?.toLowerCase()) {
-    case 'component':
-      return <ComponentEntityPage entity={entity} />;
-    case 'api':
-      return <ApiEntityPage entity={entity} />;
-    default:
-      return <DefaultEntityPage entity={entity} />;
-  }
-};
+const domainPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      <Grid container spacing={3} alignItems="stretch">
+        <Grid item md={6}>
+          <EntityAboutCard variant="gridItem" />
+        </Grid>
+        <Grid item md={6}>
+          <EntityHasSystemsCard variant="gridItem" />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+  </EntityLayout>
+);
+
+export const entityPage = (
+  <EntitySwitch>
+    <EntitySwitch.Case if={isKind('component')} children={componentPage} />
+    <EntitySwitch.Case if={isKind('api')} children={apiPage} />
+    <EntitySwitch.Case if={isKind('group')} children={groupPage} />
+    <EntitySwitch.Case if={isKind('user')} children={userPage} />
+    <EntitySwitch.Case if={isKind('system')} children={systemPage} />
+    <EntitySwitch.Case if={isKind('domain')} children={domainPage} />
+
+    <EntitySwitch.Case>{defaultEntityPage}</EntitySwitch.Case>
+  </EntitySwitch>
+);
diff --git a/packages/app/src/plugins.ts b/packages/app/src/plugins.ts
index d3c9d6e..df53885 100644
--- a/packages/app/src/plugins.ts
+++ b/packages/app/src/plugins.ts
@@ -3,3 +3,2 @@ export { plugin as CatalogPlugin } from '@backstage/plugin-catalog';
 export { plugin as CatalogImport } from '@backstage/plugin-catalog-import';
-export { plugin as Circleci } from '@backstage/plugin-circleci';
 export { plugin as GithubActions } from '@backstage/plugin-github-actions';
@@ -8 +7,3 @@ export { plugin as TechDocsPlugin } from '@backstage/plugin-techdocs';
 export { plugin as TechRadar } from '@backstage/plugin-tech-radar';
+export { plugin as UserSettings } from '@backstage/plugin-user-settings';
+
diff --git a/packages/backend/Dockerfile b/packages/backend/Dockerfile
index 5051471..31231a3 100644
--- a/packages/backend/Dockerfile
+++ b/packages/backend/Dockerfile
@@ -1,4 +1,15 @@
-FROM node:12-buster
+# This dockerfile builds an image for the backend package.
+# It should be executed with the root of the repo as docker context.
+#
+# Before building this image, be sure to have run the following commands in the repo root:
+#
+# yarn install
+# yarn tsc
+# yarn build
+#
+# Once the commands have been run, you can build the image using `yarn build-image`
 
-WORKDIR /usr/src/app
+FROM node:14-buster-slim
+
+WORKDIR /app
 
@@ -7,3 +18,4 @@ WORKDIR /usr/src/app
 # and along with yarn.lock and the root package.json, that's enough to run yarn install.
-ADD yarn.lock package.json skeleton.tar ./
+COPY yarn.lock package.json packages/backend/dist/skeleton.tar.gz ./
+RUN tar xzf skeleton.tar.gz && rm skeleton.tar.gz
 
@@ -11,6 +23,6 @@ RUN yarn install --frozen-lockfile --production --network-timeout 300000 && rm -
 
-# This will copy the contents of the dist-workspace when running the build-image command.
-# Do not use this Dockerfile outside of that command, as it will copy in the source code instead.
-COPY . .
+# Then copy the rest of the backend bundle, along with any other files we might want.
+COPY packages/backend/dist/bundle.tar.gz app-config.yaml ./
+RUN tar xzf bundle.tar.gz && rm bundle.tar.gz
 
-CMD ["node", "packages/backend", "--config", "app-config.yaml", "--config", "app-config.production.yaml"]
+CMD ["node", "packages/backend", "--config", "app-config.yaml"]
diff --git a/packages/backend/package.json b/packages/backend/package.json
index 7a75e78..807c963 100644
--- a/packages/backend/package.json
+++ b/packages/backend/package.json
@@ -10,4 +10,4 @@
   "scripts": {
-    "build": "backstage-cli backend:build",
-    "build-image": "backstage-cli backend:build-image --build --tag backstage",
+    "build": "backstage-cli backend:bundle",
+    "build-image": "docker build ../.. -f Dockerfile --tag backstage",
     "start": "backstage-cli backend:dev",
@@ -20,11 +20,12 @@
     "app": "0.0.0",
-    "@backstage/backend-common": "^0.4.3",
-    "@backstage/catalog-model": "^0.6.1",
-    "@backstage/config": "^0.1.2",
-    "@backstage/plugin-app-backend": "^0.3.3",
-    "@backstage/plugin-auth-backend": "^0.2.10",
-    "@backstage/plugin-catalog-backend": "^0.5.3",
-    "@backstage/plugin-proxy-backend": "^0.2.3",
-    "@backstage/plugin-scaffolder-backend": "^0.4.1",
-    "@backstage/plugin-techdocs-backend": "^0.5.3",
+    "@backstage/backend-common": "^0.6.2",
+    "@backstage/catalog-model": "^0.7.7",
+    "@backstage/catalog-client": "^0.3.10",
+    "@backstage/config": "^0.1.4",
+    "@backstage/plugin-app-backend": "^0.3.11",
+    "@backstage/plugin-auth-backend": "^0.3.8",
+    "@backstage/plugin-catalog-backend": "^0.7.1",
+    "@backstage/plugin-proxy-backend": "^0.2.6",
+    "@backstage/plugin-scaffolder-backend": "^0.9.6",
+    "@backstage/plugin-techdocs-backend": "^0.7.1",
     "@gitbeaker/node": "^28.0.2",
@@ -33,3 +34,3 @@
     "express": "^4.17.1",
-    "express-promise-router": "^3.0.3",
+    "express-promise-router": "^4.1.0",
     "knex": "^0.21.6",
@@ -39,7 +40,6 @@
   "devDependencies": {
-    "@backstage/cli": "^0.4.6",
+    "@backstage/cli": "^0.6.8",
     "@types/dockerode": "^3.2.1",
     "@types/express": "^4.17.6",
-    "@types/express-serve-static-core": "^4.17.5",
-    "@types/helmet": "^0.0.47"
+    "@types/express-serve-static-core": "^4.17.5"
   },
diff --git a/packages/backend/src/plugins/app.ts b/packages/backend/src/plugins/app.ts
index 5131694..07fb04f 100644
--- a/packages/backend/src/plugins/app.ts
+++ b/packages/backend/src/plugins/app.ts
@@ -1,2 +1,3 @@
 import { createRouter } from '@backstage/plugin-app-backend';
+import { Router } from 'express';
 import { PluginEnvironment } from '../types';
@@ -6,3 +7,3 @@ export default async function createPlugin({
   config,
-}: PluginEnvironment) {
+}: PluginEnvironment): Promise<Router> {
   return await createRouter({
diff --git a/packages/backend/src/plugins/auth.ts b/packages/backend/src/plugins/auth.ts
index fe19855..5216510 100644
--- a/packages/backend/src/plugins/auth.ts
+++ b/packages/backend/src/plugins/auth.ts
@@ -1,2 +1,3 @@
 import { createRouter } from '@backstage/plugin-auth-backend';
+import { Router } from 'express';
 import { PluginEnvironment } from '../types';
@@ -8,3 +9,3 @@ export default async function createPlugin({
   discovery,
-}: PluginEnvironment) {
+}: PluginEnvironment): Promise<Router> {
   return await createRouter({ logger, config, database, discovery });
diff --git a/packages/backend/src/plugins/catalog.ts b/packages/backend/src/plugins/catalog.ts
index 10ac116..838228c 100644
--- a/packages/backend/src/plugins/catalog.ts
+++ b/packages/backend/src/plugins/catalog.ts
@@ -4,7 +4,8 @@ import {
   createRouter,
-  runPeriodically,
+  runPeriodically
 } from '@backstage/plugin-catalog-backend';
+import { Router } from 'express';
 import { PluginEnvironment } from '../types';
 
-export default async function createPlugin(env: PluginEnvironment) {
+export default async function createPlugin(env: PluginEnvironment): Promise<Router> {
   const builder = new CatalogBuilder(env);
@@ -14,2 +15,3 @@ export default async function createPlugin(env: PluginEnvironment) {
     higherOrderOperation,
+    locationAnalyzer,
   } = await builder.build();
@@ -25,3 +27,5 @@ export default async function createPlugin(env: PluginEnvironment) {
     higherOrderOperation,
+    locationAnalyzer,
     logger: env.logger,
+    config: env.config,
   });
diff --git a/packages/backend/src/plugins/proxy.ts b/packages/backend/src/plugins/proxy.ts
index 388d3fc..506f6d9 100644
--- a/packages/backend/src/plugins/proxy.ts
+++ b/packages/backend/src/plugins/proxy.ts
@@ -1,3 +1,3 @@
-// @ts-ignore
 import { createRouter } from '@backstage/plugin-proxy-backend';
+import { Router } from 'express';
 import { PluginEnvironment } from '../types';
@@ -8,3 +8,3 @@ export default async function createPlugin({
   discovery,
-}: PluginEnvironment) {
+}: PluginEnvironment): Promise<Router> {
   return await createRouter({ logger, config, discovery });
diff --git a/packages/backend/src/plugins/scaffolder.ts b/packages/backend/src/plugins/scaffolder.ts
index 2dc69fe..a3416c5 100644
--- a/packages/backend/src/plugins/scaffolder.ts
+++ b/packages/backend/src/plugins/scaffolder.ts
@@ -1,21 +1,14 @@
+import { SingleHostDiscovery } from '@backstage/backend-common';
+import { CatalogClient } from '@backstage/catalog-client';
 import {
   CookieCutter,
+  CreateReactAppTemplater,
   createRouter,
-  FilePreparer,
-  GithubPreparer,
-  GitlabPreparer,
   Preparers,
   Publishers,
-  GithubPublisher,
-  GitlabPublisher,
-  CreateReactAppTemplater,
-  Templaters,
-  RepoVisibilityOptions,
-  CatalogEntityClient,
+  Templaters
 } from '@backstage/plugin-scaffolder-backend';
-import { SingleHostDiscovery } from '@backstage/backend-common';
-import { Octokit } from '@octokit/rest';
-import { Gitlab } from '@gitbeaker/node';
-import type { PluginEnvironment } from '../types';
 import Docker from 'dockerode';
+import { Router } from 'express';
+import type { PluginEnvironment } from '../types';
 
@@ -24,3 +17,5 @@ export default async function createPlugin({
   config,
-}: PluginEnvironment) {
+  database,
+  reader,
+}: PluginEnvironment): Promise<Router> {
   const cookiecutterTemplater = new CookieCutter();
@@ -28,2 +23,3 @@ export default async function createPlugin({
   const templaters = new Templaters();
+
   templaters.register('cookiecutter', cookiecutterTemplater);
@@ -31,70 +27,4 @@ export default async function createPlugin({
 
-  const filePreparer = new FilePreparer();
-  const githubPreparer = new GithubPreparer();
-  const gitlabPreparer = new GitlabPreparer(config);
-  const preparers = new Preparers();
-
-  preparers.register('file', filePreparer);
-  preparers.register('github', githubPreparer);
-  preparers.register('gitlab', gitlabPreparer);
-  preparers.register('gitlab/api', gitlabPreparer);
-
-  const publishers = new Publishers();
-
-  const githubConfig = config.getOptionalConfig('scaffolder.github');
-
-  if (githubConfig) {
-    try {
-      const repoVisibility = githubConfig.getString(
-        'visibility',
-      ) as RepoVisibilityOptions;
-
-      const githubToken = githubConfig.getString('token');
-      const githubHost = githubConfig.getOptionalString('host');
-      const githubClient = new Octokit({ auth: githubToken, baseUrl: githubHost });
-      const githubPublisher = new GithubPublisher({
-        client: githubClient,
-        token: githubToken,
-        repoVisibility,
-      });
-      publishers.register('file', githubPublisher);
-      publishers.register('github', githubPublisher);
-    } catch (e) {
-      const providerName = 'github';
-      if (process.env.NODE_ENV !== 'development') {
-        throw new Error(
-          `Failed to initialize ${providerName} scaffolding provider, ${e.message}`,
-        );
-      }
-
-      logger.warn(
-        `Skipping ${providerName} scaffolding provider, ${e.message}`,
-      );
-    }
-  }
-
-  const gitLabConfig = config.getOptionalConfig('scaffolder.gitlab.api');
-  if (gitLabConfig) {
-    try {
-      const gitLabToken = gitLabConfig.getString('token');
-      const gitLabClient = new Gitlab({
-        host: gitLabConfig.getOptionalString('baseUrl'),
-        token: gitLabToken,
-      });
-      const gitLabPublisher = new GitlabPublisher(gitLabClient, gitLabToken);
-      publishers.register('gitlab', gitLabPublisher);
-      publishers.register('gitlab/api', gitLabPublisher);
-    } catch (e) {
-      const providerName = 'gitlab';
-      if (process.env.NODE_ENV !== 'development') {
-        throw new Error(
-          `Failed to initialize ${providerName} scaffolding provider, ${e.message}`,
-        );
-      }
-
-      logger.warn(
-        `Skipping ${providerName} scaffolding provider, ${e.message}`,
-      );
-    }
-  }
+  const preparers = await Preparers.fromConfig(config, { logger });
+  const publishers = await Publishers.fromConfig(config, { logger });
 
@@ -103,3 +33,3 @@ export default async function createPlugin({
   const discovery = SingleHostDiscovery.fromConfig(config);
-  const entityClient = new CatalogEntityClient({ discovery });
+  const catalogClient = new CatalogClient({ discoveryApi: discovery });
 
@@ -112,3 +42,5 @@ export default async function createPlugin({
     dockerClient,
-    entityClient,
+    database,
+    catalogClient,
+    reader
   });
diff --git a/packages/backend/src/plugins/techdocs.ts b/packages/backend/src/plugins/techdocs.ts
index 5c7ec50..231a7e7 100644
--- a/packages/backend/src/plugins/techdocs.ts
+++ b/packages/backend/src/plugins/techdocs.ts
@@ -2,8 +2,10 @@ import {
   createRouter,
-  Preparers,
-  Generators,
-  Publisher,
+
+  Generators, Preparers,
+
+  Publisher
 } from '@backstage/plugin-techdocs-backend';
-import { PluginEnvironment } from '../types';
 import Docker from 'dockerode';
+import { Router } from 'express';
+import { PluginEnvironment } from '../types';
 
@@ -14,3 +16,3 @@ export default async function createPlugin({
   reader,
-}: PluginEnvironment) {
+}: PluginEnvironment): Promise<Router> {
   // Preparers are responsible for fetching source files for documentation.
@@ -34,2 +36,5 @@ export default async function createPlugin({
 
+  // checks if the publisher is working and logs the result
+  await publisher.getReadiness();
+
   // Docker client (conditionally) used by the generators, based on techdocs.generators config.
