diff --git a/app-config.yaml b/app-config.yaml
index 9437415..6b97bb0 100644
--- a/app-config.yaml
+++ b/app-config.yaml
@@ -25,4 +25,3 @@ integrations:
     - host: github.com
-      token:
-        $env: GITHUB_TOKEN
+      token: ${GITHUB_TOKEN}
     ### Example for how to add your GitHub Enterprise instance using the API:
@@ -30,4 +29,3 @@ integrations:
     #   apiBaseUrl: https://ghe.example.net/api/v3
-    #   token:
-    #     $env: GHE_TOKEN
+    #   token: ${GHE_TOKEN}
 
@@ -55,4 +53,3 @@ scaffolder:
   github:
-    token:
-      $env: GITHUB_TOKEN
+    token: ${GITHUB_TOKEN}
     visibility: public # or 'internal' or 'private'
@@ -61,3 +58,3 @@ catalog:
   rules:
-    - allow: [Component, API, Group, User, Template, Location]
+    - allow: [Component, System, API, Group, User, Template, Location]
   locations:
@@ -67,2 +64,6 @@ catalog:
 
+    # Backstage example systems
+    - type: url
+      target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-systems.yaml
+
     # Backstage example APIs
diff --git a/package.json b/package.json
index f06bcf3..9d460fd 100644
--- a/package.json
+++ b/package.json
@@ -24,2 +24,6 @@
   },
+  "resolutions": {
+    "graphql-language-service-interface": "2.8.2",
+    "graphql-language-service-parser": "1.9.0"
+  },
   "workspaces": {
@@ -31,3 +35,3 @@
   "devDependencies": {
-    "@backstage/cli": "^0.6.5",
+    "@backstage/cli": "^0.6.8",
     "@spotify/prettier-config": "^7.0.0",
diff --git a/packages/app/package.json b/packages/app/package.json
index a27e193..b8b49b2 100644
--- a/packages/app/package.json
+++ b/packages/app/package.json
@@ -6,20 +6,21 @@
   "dependencies": {
+    "@backstage/catalog-model": "^0.7.7",
+    "@backstage/cli": "^0.6.8",
+    "@backstage/core": "^0.7.5",
+    "@backstage/integration-react": "^0.1.1",
+    "@backstage/plugin-api-docs": "^0.4.11",
+    "@backstage/plugin-catalog": "^0.5.4",
+    "@backstage/plugin-catalog-import": "^0.5.2",
+    "@backstage/plugin-catalog-react": "^0.1.4",
+    "@backstage/plugin-github-actions": "^0.4.3",
+    "@backstage/plugin-org": "^0.3.12",
+    "@backstage/plugin-scaffolder": "^0.9.0",
+    "@backstage/plugin-search": "^0.3.4",
+    "@backstage/plugin-tech-radar": "^0.3.9",
+    "@backstage/plugin-techdocs": "^0.7.2",
+    "@backstage/plugin-user-settings": "^0.2.9",
+    "@backstage/test-utils": "^0.1.10",
+    "@backstage/theme": "^0.2.5",
     "@material-ui/core": "^4.11.0",
     "@material-ui/icons": "^4.9.1",
-    "@backstage/cli": "^0.6.5",
-    "@backstage/core": "^0.7.2",
-    "@backstage/plugin-api-docs": "^0.4.9",
-    "@backstage/plugin-catalog": "^0.5.0",
-    "@backstage/plugin-catalog-react": "^0.1.2",
-    "@backstage/plugin-catalog-import": "^0.5.0",
-    "@backstage/plugin-scaffolder": "^0.8.0",
-    "@backstage/plugin-techdocs": "^0.6.2",
-    "@backstage/catalog-model": "^0.7.4",
-    "@backstage/plugin-tech-radar": "^0.3.8",
-    "@backstage/plugin-github-actions": "^0.4.1",
-    "@backstage/plugin-user-settings": "^0.2.8",
-    "@backstage/plugin-search": "^0.3.4",
-    "@backstage/integration-react": "^0.1.1",
-    "@backstage/test-utils": "^0.1.9",
-    "@backstage/theme": "^0.2.4",
     "history": "^5.0.0",
diff --git a/packages/app/src/App.tsx b/packages/app/src/App.tsx
index b2c9d10..1ed7aa0 100644
--- a/packages/app/src/App.tsx
+++ b/packages/app/src/App.tsx
@@ -1 +1,3 @@
+import React from 'react';
+import { Navigate, Route } from 'react-router';
 import {
@@ -5,3 +7,2 @@ import {
   OAuthRequestDialog,
-  SidebarPage,
 } from '@backstage/core';
@@ -13,3 +14,3 @@ import {
 } from '@backstage/plugin-catalog';
-import { CatalogImportPage } from '@backstage/plugin-catalog-import';
+import {CatalogImportPage, catalogImportPlugin} from '@backstage/plugin-catalog-import';
 import { ScaffolderPage, scaffolderPlugin } from '@backstage/plugin-scaffolder';
@@ -19,8 +20,6 @@ import { TechdocsPage } from '@backstage/plugin-techdocs';
 import { UserSettingsPage } from '@backstage/plugin-user-settings';
-import React from 'react';
-import { Navigate, Route } from 'react-router';
 import { apis } from './apis';
-import { EntityPage } from './components/catalog/EntityPage';
+import { entityPage } from './components/catalog/EntityPage';
+import { Root } from './components/Root';
 import * as plugins from './plugins';
-import { AppSidebar } from './sidebar';
 
@@ -36,2 +35,5 @@ const app = createApp({
     });
+    bind(scaffolderPlugin.externalRoutes, {
+      registerComponent: catalogImportPlugin.routes.importPage,
+    });
   },
@@ -42,2 +44,25 @@ const AppRouter = app.getRouter();
 
+const routes = (
+  <FlatRoutes>
+    <Navigate key="/" to="/catalog" />
+    <Route path="/catalog" element={<CatalogIndexPage />} />
+    <Route
+      path="/catalog/:namespace/:kind/:name"
+      element={<CatalogEntityPage />}
+    >
+      {entityPage}
+    </Route>
+    <Route path="/docs" element={<TechdocsPage />} />
+    <Route path="/create" element={<ScaffolderPage />} />
+    <Route path="/api-docs" element={<ApiExplorerPage />} />
+    <Route
+      path="/tech-radar"
+      element={<TechRadarPage width={1500} height={800} />}
+    />
+    <Route path="/catalog-import" element={<CatalogImportPage />} />
+    <Route path="/search" element={<SearchPage />} />
+    <Route path="/settings" element={<UserSettingsPage />} />
+  </FlatRoutes>
+);
+
 const App = () => (
@@ -47,25 +72,3 @@ const App = () => (
     <AppRouter>
-      <SidebarPage>
-        <AppSidebar />
-        <FlatRoutes>
-          <Navigate key="/" to="/catalog" />
-          <Route path="/catalog" element={<CatalogIndexPage />} />
-          <Route
-            path="/catalog/:namespace/:kind/:name"
-            element={<CatalogEntityPage />}
-          >
-            <EntityPage />
-          </Route>
-          <Route path="/docs" element={<TechdocsPage />} />
-          <Route path="/create" element={<ScaffolderPage />} />
-          <Route path="/api-docs" element={<ApiExplorerPage />} />
-          <Route
-            path="/tech-radar"
-            element={<TechRadarPage width={1500} height={800} />}
-          />
-          <Route path="/catalog-import" element={<CatalogImportPage />} />
-          <Route path="/search" element={<SearchPage />} />
-          <Route path="/settings" element={<UserSettingsPage />} />
-        </FlatRoutes>
-      </SidebarPage>
+      <Root>{routes}</Root>
     </AppRouter>
diff --git a/packages/app/src/LogoFull.tsx b/packages/app/src/components/Root/LogoFull.tsx
similarity index 100%
rename from packages/app/src/LogoFull.tsx
rename to packages/app/src/components/Root/LogoFull.tsx
diff --git a/packages/app/src/LogoIcon.tsx b/packages/app/src/components/Root/LogoIcon.tsx
similarity index 100%
rename from packages/app/src/LogoIcon.tsx
rename to packages/app/src/components/Root/LogoIcon.tsx
diff --git a/packages/app/src/sidebar.tsx b/packages/app/src/components/Root/Root.tsx
similarity index 50%
rename from packages/app/src/sidebar.tsx
rename to packages/app/src/components/Root/Root.tsx
index 9f7973c..9c07e0c 100644
--- a/packages/app/src/sidebar.tsx
+++ b/packages/app/src/components/Root/Root.tsx
@@ -1,24 +1,39 @@
-import React, { useContext } from 'react';
+/*
+ * Copyright 2020 Spotify AB
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import React, { useContext, PropsWithChildren } from 'react';
+import { Link, makeStyles } from '@material-ui/core';
 import HomeIcon from '@material-ui/icons/Home';
-import LibraryBooks from '@material-ui/icons/LibraryBooks';
 import ExtensionIcon from '@material-ui/icons/Extension';
-import CreateComponentIcon from '@material-ui/icons/AddCircleOutline';
 import MapIcon from '@material-ui/icons/MyLocation';
-import { Link, makeStyles } from '@material-ui/core';
-import { NavLink } from 'react-router-dom';
+import LibraryBooks from '@material-ui/icons/LibraryBooks';
+import CreateComponentIcon from '@material-ui/icons/AddCircleOutline';
 import LogoFull from './LogoFull';
 import LogoIcon from './LogoIcon';
-import { Settings as SidebarSettings } from '@backstage/plugin-user-settings';
-
 import {
   Sidebar,
-  SidebarItem,
-  SidebarDivider,
+  SidebarPage,
   sidebarConfig,
   SidebarContext,
+  SidebarItem,
+  SidebarDivider,
   SidebarSpace,
 } from '@backstage/core';
+import { NavLink } from 'react-router-dom';
+import { Settings as SidebarSettings } from '@backstage/plugin-user-settings';
 import { SidebarSearch } from '@backstage/plugin-search';
 
-
 const useSidebarLogoStyles = makeStyles({
@@ -56,20 +71,22 @@ const SidebarLogo = () => {
 
-export const AppSidebar = () => (
-  <Sidebar>
-    <SidebarLogo />
-    <SidebarSearch />
-    <SidebarDivider />
-    {/* Global nav, not org-specific */}
-    <SidebarItem icon={HomeIcon} to="./" text="Home" />
-    <SidebarItem icon={ExtensionIcon} to="api-docs" text="APIs" />
-    <SidebarItem icon={LibraryBooks} to="/docs" text="Docs" />
-    <SidebarItem icon={CreateComponentIcon} to="create" text="Create..." />
-    <SidebarDivider />
-    <SidebarItem icon={MapIcon} to="tech-radar" text="Tech Radar" />
-    {/* End global nav */}
-    <SidebarDivider />
-    <SidebarSpace />
-    <SidebarDivider />
-    <SidebarSettings />
-  </Sidebar>
+export const Root = ({ children }: PropsWithChildren<{}>) => (
+  <SidebarPage>
+    <Sidebar>
+      <SidebarLogo />
+      <SidebarSearch />
+      <SidebarDivider />
+      {/* Global nav, not org-specific */}
+      <SidebarItem icon={HomeIcon} to="/catalog" text="Home" />
+      <SidebarItem icon={ExtensionIcon} to="api-docs" text="APIs" />
+      <SidebarItem icon={LibraryBooks} to="docs" text="Docs" />
+      <SidebarItem icon={CreateComponentIcon} to="create" text="Create..." />
+      {/* End global nav */}
+      <SidebarDivider />
+      <SidebarItem icon={MapIcon} to="tech-radar" text="Tech Radar" />
+      <SidebarSpace />
+      <SidebarDivider />
+      <SidebarSettings />
+    </Sidebar>
+    {children}
+  </SidebarPage>
 );
diff --git a/packages/app/src/components/Root/index.ts b/packages/app/src/components/Root/index.ts
new file mode 100644
index 0000000..ab65cb2
--- /dev/null
+++ b/packages/app/src/components/Root/index.ts
@@ -0,0 +1,17 @@
+/*
+ * Copyright 2020 Spotify AB
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+export { Root } from './Root';
diff --git a/packages/app/src/components/catalog/EntityPage.tsx b/packages/app/src/components/catalog/EntityPage.tsx
index b1884ac..f1aba46 100644
--- a/packages/app/src/components/catalog/EntityPage.tsx
+++ b/packages/app/src/components/catalog/EntityPage.tsx
@@ -15,56 +15,66 @@
  */
-import { ApiEntity, Entity } from '@backstage/catalog-model';
-import { WarningPanel } from '@backstage/core';
+import React from 'react';
+import { Button, Grid } from '@material-ui/core';
+import { EmptyState } from '@backstage/core';
 import {
-  ApiDefinitionCard,
-  ConsumedApisCard,
-  ConsumingComponentsCard,
-  ProvidedApisCard,
-  ProvidingComponentsCard
+  EntityApiDefinitionCard,
+  EntityConsumedApisCard,
+  EntityConsumingComponentsCard,
+  EntityHasApisCard,
+  EntityProvidedApisCard,
+  EntityProvidingComponentsCard,
 } from '@backstage/plugin-api-docs';
 import {
-  AboutCard, EntityPageLayout,
+  EntityAboutCard,
+  EntitySystemDiagramCard,
+  EntityHasComponentsCard,
+  EntityHasSystemsCard,
+  EntityLayout,
+  EntitySwitch,
+  isComponentType,
+  isKind,
 } from '@backstage/plugin-catalog';
 import {
-  useEntity
-} from '@backstage/plugin-catalog-react';
-import {
-  isPluginApplicableToEntity as isGitHubActionsAvailable, Router as GitHubActionsRouter
+  isGithubActionsAvailable,
+  EntityGithubActionsContent,
 } from '@backstage/plugin-github-actions';
-import { EmbeddedDocsRouter as DocsRouter } from '@backstage/plugin-techdocs';
-import { Grid } from '@material-ui/core';
-import React from 'react';
-
+import {
+  EntityUserProfileCard,
+  EntityGroupProfileCard,
+  EntityMembersListCard,
+  EntityOwnershipCard,
+} from '@backstage/plugin-org';
+import { EntityTechdocsContent } from '@backstage/plugin-techdocs';
 
-const CICDSwitcher = ({ entity }: { entity: Entity }) => {
-  // This component is just an example of how you can implement your company's logic in entity page.
+const cicdContent = (
+  // This is an example of how you can implement your company's logic in entity page.
   // You can for example enforce that all components of type 'service' should use GitHubActions
-  switch (true) {
-    case isGitHubActionsAvailable(entity):
-      return <GitHubActionsRouter entity={entity} />;
-    default:
-      return (
-        <WarningPanel title="CI/CD switcher:">
-          No CI/CD is available for this entity. Check corresponding
-          annotations!
-        </WarningPanel>
-      );
-  }
-};
-
-const OverviewContent = ({ entity }: { entity: Entity }) => (
-  <Grid container spacing={3} alignItems="stretch">
-    <Grid item>
-      <AboutCard entity={entity} variant="gridItem" />
-    </Grid>
-  </Grid>
+  <EntitySwitch>
+    <EntitySwitch.Case if={isGithubActionsAvailable}>
+      <EntityGithubActionsContent />
+    </EntitySwitch.Case>
+
+    <EntitySwitch.Case>
+      <EmptyState
+        title="No CI/CD available for this entity"
+        missing="info"
+        description="You need to add an annotation to your component if you want to enable CI/CD for it. You can read more about annotations in Backstage by clicking the button below."
+        action={
+          <Button
+            variant="contained"
+            color="primary"
+            href="https://backstage.io/docs/features/software-catalog/well-known-annotations"
+          >
+            Read more
+          </Button>
+        }
+      />
+    </EntitySwitch.Case>
+  </EntitySwitch>
 );
 
-const ComponentApisContent = ({ entity }: { entity: Entity }) => (
+const overviewContent = (
   <Grid container spacing={3} alignItems="stretch">
     <Grid item md={6}>
-      <ProvidedApisCard entity={entity} />
-    </Grid>
-    <Grid item md={6}>
-      <ConsumedApisCard entity={entity} />
+      <EntityAboutCard variant="gridItem" />
     </Grid>
@@ -73,123 +83,180 @@ const ComponentApisContent = ({ entity }: { entity: Entity }) => (
 
-const ServiceEntityPage = ({ entity }: { entity: Entity }) => (
-  <EntityPageLayout>
-    <EntityPageLayout.Content
-      path="/"
-      title="Overview"
-      element={<OverviewContent entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/ci-cd/*"
-      title="CI/CD"
-      element={<CICDSwitcher entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/api/*"
-      title="API"
-      element={<ComponentApisContent entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/docs/*"
-      title="Docs"
-      element={<DocsRouter entity={entity} />}
-    />
-  </EntityPageLayout>
+const serviceEntityPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      {overviewContent}
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/ci-cd" title="CI/CD">
+      {cicdContent}
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/api" title="API">
+      <Grid container spacing={3} alignItems="stretch">
+        <Grid item md={6}>
+          <EntityProvidedApisCard />
+        </Grid>
+        <Grid item md={6}>
+          <EntityConsumedApisCard />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/docs" title="Docs">
+      <EntityTechdocsContent />
+    </EntityLayout.Route>
+  </EntityLayout>
 );
 
-const WebsiteEntityPage = ({ entity }: { entity: Entity }) => (
-  <EntityPageLayout>
-    <EntityPageLayout.Content
-      path="/"
-      title="Overview"
-      element={<OverviewContent entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/ci-cd/*"
-      title="CI/CD"
-      element={<CICDSwitcher entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/docs/*"
-      title="Docs"
-      element={<DocsRouter entity={entity} />}
-    />
-  </EntityPageLayout>
+const websiteEntityPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      {overviewContent}
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/ci-cd" title="CI/CD">
+      {cicdContent}
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/docs" title="Docs">
+      <EntityTechdocsContent />
+    </EntityLayout.Route>
+  </EntityLayout>
 );
 
-const DefaultEntityPage = ({ entity }: { entity: Entity }) => (
-  <EntityPageLayout>
-    <EntityPageLayout.Content
-      path="/*"
-      title="Overview"
-      element={<OverviewContent entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/docs/*"
-      title="Docs"
-      element={<DocsRouter entity={entity} />}
-    />
-  </EntityPageLayout>
+const defaultEntityPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      {overviewContent}
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/docs" title="Docs">
+      <EntityTechdocsContent />
+    </EntityLayout.Route>
+  </EntityLayout>
 );
 
-export const ComponentEntityPage = ({ entity }: { entity: Entity }) => {
-  switch (entity?.spec?.type) {
-    case 'service':
-      return <ServiceEntityPage entity={entity} />;
-    case 'website':
-      return <WebsiteEntityPage entity={entity} />;
-    default:
-      return <DefaultEntityPage entity={entity} />;
-  }
-};
-
-const ApiOverviewContent = ({ entity }: { entity: Entity }) => (
-  <Grid container spacing={3}>
-    <Grid item md={6}>
-      <AboutCard entity={entity} />
-    </Grid>
-    <Grid container item md={12}>
-      <Grid item md={6}>
-        <ProvidingComponentsCard entity={entity} />
+const componentPage = (
+  <EntitySwitch>
+    <EntitySwitch.Case if={isComponentType('service')}>
+      {serviceEntityPage}
+    </EntitySwitch.Case>
+
+    <EntitySwitch.Case if={isComponentType('website')}>
+      {websiteEntityPage}
+    </EntitySwitch.Case>
+
+    <EntitySwitch.Case>{defaultEntityPage}</EntitySwitch.Case>
+  </EntitySwitch>
+);
+
+const apiPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      <Grid container spacing={3}>
+        <Grid item md={6}>
+          <EntityAboutCard />
+        </Grid>
+        <Grid container item md={12}>
+          <Grid item md={6}>
+            <EntityProvidingComponentsCard />
+          </Grid>
+          <Grid item md={6}>
+            <EntityConsumingComponentsCard />
+          </Grid>
+        </Grid>
       </Grid>
-      <Grid item md={6}>
-        <ConsumingComponentsCard entity={entity} />
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/definition" title="Definition">
+      <Grid container spacing={3}>
+        <Grid item xs={12}>
+          <EntityApiDefinitionCard />
+        </Grid>
       </Grid>
-    </Grid>
-  </Grid>
+    </EntityLayout.Route>
+  </EntityLayout>
 );
 
-const ApiDefinitionContent = ({ entity }: { entity: ApiEntity }) => (
-  <Grid container spacing={3}>
-    <Grid item xs={12}>
-      <ApiDefinitionCard apiEntity={entity} />
-    </Grid>
-  </Grid>
+const userPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      <Grid container spacing={3}>
+        <Grid item xs={12} md={6}>
+          <EntityUserProfileCard variant="gridItem" />
+        </Grid>
+        <Grid item xs={12} md={6}>
+          <EntityOwnershipCard variant="gridItem" />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+  </EntityLayout>
 );
 
-const ApiEntityPage = ({ entity }: { entity: Entity }) => (
-  <EntityPageLayout>
-    <EntityPageLayout.Content
-      path="/*"
-      title="Overview"
-      element={<ApiOverviewContent entity={entity} />}
-    />
-    <EntityPageLayout.Content
-      path="/definition/*"
-      title="Definition"
-      element={<ApiDefinitionContent entity={entity as ApiEntity} />}
-    />
-  </EntityPageLayout>
+const groupPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      <Grid container spacing={3}>
+        <Grid item xs={12} md={6}>
+          <EntityGroupProfileCard variant="gridItem" />
+        </Grid>
+        <Grid item xs={12} md={6}>
+          <EntityOwnershipCard variant="gridItem" />
+        </Grid>
+        <Grid item xs={12}>
+          <EntityMembersListCard />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+
+    <EntityLayout.Route path="/diagram" title="Diagram">
+      <EntitySystemDiagramCard />
+    </EntityLayout.Route>
+  </EntityLayout>
+);
+
+const systemPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      <Grid container spacing={3} alignItems="stretch">
+        <Grid item md={6}>
+          <EntityAboutCard variant="gridItem" />
+        </Grid>
+        <Grid item md={6}>
+          <EntityHasComponentsCard variant="gridItem" />
+        </Grid>
+        <Grid item md={6}>
+          <EntityHasApisCard variant="gridItem" />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+  </EntityLayout>
 );
 
-export const EntityPage = () => {
-  const { entity } = useEntity();
-
-  switch (entity?.kind?.toLocaleLowerCase('en-US')) {
-    case 'component':
-      return <ComponentEntityPage entity={entity} />;
-    case 'api':
-      return <ApiEntityPage entity={entity} />;
-    default:
-      return <DefaultEntityPage entity={entity} />;
-  }
-};
+const domainPage = (
+  <EntityLayout>
+    <EntityLayout.Route path="/" title="Overview">
+      <Grid container spacing={3} alignItems="stretch">
+        <Grid item md={6}>
+          <EntityAboutCard variant="gridItem" />
+        </Grid>
+        <Grid item md={6}>
+          <EntityHasSystemsCard variant="gridItem" />
+        </Grid>
+      </Grid>
+    </EntityLayout.Route>
+  </EntityLayout>
+);
+
+export const entityPage = (
+  <EntitySwitch>
+    <EntitySwitch.Case if={isKind('component')} children={componentPage} />
+    <EntitySwitch.Case if={isKind('api')} children={apiPage} />
+    <EntitySwitch.Case if={isKind('group')} children={groupPage} />
+    <EntitySwitch.Case if={isKind('user')} children={userPage} />
+    <EntitySwitch.Case if={isKind('system')} children={systemPage} />
+    <EntitySwitch.Case if={isKind('domain')} children={domainPage} />
+
+    <EntitySwitch.Case>{defaultEntityPage}</EntitySwitch.Case>
+  </EntitySwitch>
+);
diff --git a/packages/backend/Dockerfile b/packages/backend/Dockerfile
index acef405..31231a3 100644
--- a/packages/backend/Dockerfile
+++ b/packages/backend/Dockerfile
@@ -18,3 +18,4 @@ WORKDIR /app
 # and along with yarn.lock and the root package.json, that's enough to run yarn install.
-ADD yarn.lock package.json packages/backend/dist/skeleton.tar.gz ./
+COPY yarn.lock package.json packages/backend/dist/skeleton.tar.gz ./
+RUN tar xzf skeleton.tar.gz && rm skeleton.tar.gz
 
@@ -23,3 +24,4 @@ RUN yarn install --frozen-lockfile --production --network-timeout 300000 && rm -
 # Then copy the rest of the backend bundle, along with any other files we might want.
-ADD packages/backend/dist/bundle.tar.gz app-config.yaml ./
+COPY packages/backend/dist/bundle.tar.gz app-config.yaml ./
+RUN tar xzf bundle.tar.gz && rm bundle.tar.gz
 
diff --git a/packages/backend/package.json b/packages/backend/package.json
index da5e3e2..807c963 100644
--- a/packages/backend/package.json
+++ b/packages/backend/package.json
@@ -20,12 +20,12 @@
     "app": "0.0.0",
-    "@backstage/backend-common": "^0.6.0",
-    "@backstage/catalog-model": "^0.7.4",
-    "@backstage/catalog-client": "^0.3.8",
+    "@backstage/backend-common": "^0.6.2",
+    "@backstage/catalog-model": "^0.7.7",
+    "@backstage/catalog-client": "^0.3.10",
     "@backstage/config": "^0.1.4",
-    "@backstage/plugin-app-backend": "^0.3.10",
-    "@backstage/plugin-auth-backend": "^0.3.5",
-    "@backstage/plugin-catalog-backend": "^0.6.6",
+    "@backstage/plugin-app-backend": "^0.3.11",
+    "@backstage/plugin-auth-backend": "^0.3.8",
+    "@backstage/plugin-catalog-backend": "^0.7.1",
     "@backstage/plugin-proxy-backend": "^0.2.6",
-    "@backstage/plugin-scaffolder-backend": "^0.9.2",
-    "@backstage/plugin-techdocs-backend": "^0.6.5",
+    "@backstage/plugin-scaffolder-backend": "^0.9.6",
+    "@backstage/plugin-techdocs-backend": "^0.7.1",
     "@gitbeaker/node": "^28.0.2",
@@ -34,3 +34,3 @@
     "express": "^4.17.1",
-    "express-promise-router": "^3.0.3",
+    "express-promise-router": "^4.1.0",
     "knex": "^0.21.6",
@@ -40,3 +40,3 @@
   "devDependencies": {
-    "@backstage/cli": "^0.6.5",
+    "@backstage/cli": "^0.6.8",
     "@types/dockerode": "^3.2.1",
diff --git a/packages/backend/src/plugins/catalog.ts b/packages/backend/src/plugins/catalog.ts
index 883b70c..838228c 100644
--- a/packages/backend/src/plugins/catalog.ts
+++ b/packages/backend/src/plugins/catalog.ts
@@ -15,2 +15,3 @@ export default async function createPlugin(env: PluginEnvironment): Promise<Rout
     higherOrderOperation,
+    locationAnalyzer,
   } = await builder.build();
@@ -26,3 +27,5 @@ export default async function createPlugin(env: PluginEnvironment): Promise<Rout
     higherOrderOperation,
+    locationAnalyzer,
     logger: env.logger,
+    config: env.config,
   });
diff --git a/packages/backend/src/plugins/techdocs.ts b/packages/backend/src/plugins/techdocs.ts
index 0ba08ce..231a7e7 100644
--- a/packages/backend/src/plugins/techdocs.ts
+++ b/packages/backend/src/plugins/techdocs.ts
@@ -36,2 +36,5 @@ export default async function createPlugin({
 
+  // checks if the publisher is working and logs the result
+  await publisher.getReadiness();
+
   // Docker client (conditionally) used by the generators, based on techdocs.generators config.
