diff --git a/.dockerignore b/.dockerignore
new file mode 100644
index 0000000..63c9c34
--- /dev/null
+++ b/.dockerignore
@@ -0,0 +1,5 @@
+.git
+node_modules
+packages
+!packages/backend/dist
+plugins
diff --git a/.gitignore b/.gitignore
index 5f5cc73..4adebc5 100644
--- a/.gitignore
+++ b/.gitignore
@@ -32,2 +32,5 @@ site
 # Local configuration files
-*.local.yaml
\ No newline at end of file
+*.local.yaml
+
+# Sensitive credentials
+*-credentials.yaml
diff --git a/app-config.production.yaml b/app-config.production.yaml
new file mode 100644
index 0000000..92f4574
--- /dev/null
+++ b/app-config.production.yaml
@@ -0,0 +1,8 @@
+app:
+  # Should be the same as backend.baseUrl when using the `app-backend` plugin
+  baseUrl: http://localhost:7000
+
+backend:
+  baseUrl: http://localhost:7000
+  listen:
+    port: 7000
diff --git a/app-config.yaml b/app-config.yaml
index 269756c..d5ce05d 100644
--- a/app-config.yaml
+++ b/app-config.yaml
@@ -38,10 +38,12 @@ proxy:
 
+# Reference documentation http://backstage.io/docs/features/techdocs/configuration
+# Note: After experimenting with basic setup, use CI/CD to generate docs
+# and an external cloud storage when deploying TechDocs for production use-case.
+# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
 techdocs:
-  storageUrl: http://localhost:7000/api/techdocs/static/docs
-  requestUrl: http://localhost:7000/api/techdocs
+  builder: 'local' # Alternatives - 'external'
   generators:
-    techdocs: 'docker'
-
-lighthouse:
-  baseUrl: http://localhost:3003
+    techdocs: 'docker' # Alternatives - 'local'
+  publisher:
+    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.
 
@@ -70,3 +72,3 @@ catalog:
     # Backstage example templates
-    - type: github
+    - type: url
       target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/react-ssr-template/template.yaml
@@ -74,3 +76,3 @@ catalog:
         - allow: [Template]
-    - type: github
+    - type: url
       target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/springboot-grpc-template/template.yaml
@@ -78,3 +80,3 @@ catalog:
         - allow: [Template]
-    - type: github
+    - type: url
       target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/create-react-app/template.yaml
@@ -82,3 +84,3 @@ catalog:
         - allow: [Template]
-    - type: github
+    - type: url
       target: https://github.com/spotify/cookiecutter-golang/blob/master/template.yaml
@@ -86,3 +88,3 @@ catalog:
         - allow: [Template]
-    - type: github
+    - type: url
       target: https://github.com/backstage/backstage/blob/master/plugins/scaffolder-backend/sample-templates/docs-template/template.yaml
diff --git a/catalog-info.yaml b/catalog-info.yaml
index 41794b4..841a480 100644
--- a/catalog-info.yaml
+++ b/catalog-info.yaml
@@ -8,3 +8,3 @@ metadata:
     # github.com/project-slug: backstage/backstage
-    # backstage.io/techdocs-ref: github:https://github.com/backstage/backstage.git
+    # backstage.io/techdocs-ref: url:https://github.com/backstage/backstage
 spec:
diff --git a/package.json b/package.json
index db8ca15..6e2213f 100644
--- a/package.json
+++ b/package.json
@@ -9,3 +9,5 @@
     "start": "yarn workspace app start",
+    "start-backend": "yarn workspace backend start",
     "build": "lerna run build",
+    "build-image": "yarn workspace backend build-image",
     "tsc": "tsc",
@@ -28,10 +30,7 @@
   "devDependencies": {
-    "@backstage/cli": "^0.2.0",
+    "@backstage/cli": "^0.6.3",
     "@spotify/prettier-config": "^7.0.0",
-    "lerna": "^3.20.2",
+    "lerna": "^4.0.0",
     "prettier": "^1.19.1"
   },
-  "resolutions": {
-    "esbuild": "0.6.3"
-  },
   "prettier": "@spotify/prettier-config",
@@ -48,3 +47,3 @@
     "transformModules": [
-      "@kyma-project/asyncapi-react"
+      "@asyncapi/react-component"
     ]
diff --git a/packages/app/package.json b/packages/app/package.json
index 985aa1e..24f29b2 100644
--- a/packages/app/package.json
+++ b/packages/app/package.json
@@ -8,18 +8,18 @@
     "@material-ui/icons": "^4.9.1",
-    "@backstage/cli": "^0.2.0",
-    "@backstage/core": "^0.2.0",
-    "@backstage/plugin-api-docs": "^0.2.0",
-    "@backstage/plugin-catalog": "^0.2.0",
-    "@backstage/plugin-register-component": "^0.2.0",
-    "@backstage/plugin-scaffolder": "^0.2.0",
-    "@backstage/plugin-techdocs": "^0.2.0",
-    "@backstage/catalog-model": "^0.2.0",
-    "@backstage/plugin-circleci": "^0.2.0",
-    "@backstage/plugin-explore": "^0.2.0",
-    "@backstage/plugin-lighthouse": "^0.2.0",
-    "@backstage/plugin-tech-radar": "^0.2.0",
-    "@backstage/plugin-github-actions": "^0.2.0",
-    "@backstage/plugin-user-settings": "^0.2.0",
-    "@backstage/test-utils": "^0.1.2",
-    "@backstage/theme": "^0.2.0",
+    "@backstage/cli": "^0.6.3",
+    "@backstage/core": "^0.7.0",
+    "@backstage/plugin-api-docs": "^0.4.8",
+    "@backstage/plugin-catalog": "^0.4.1",
+    "@backstage/plugin-catalog-react": "^0.1.1",
+    "@backstage/plugin-catalog-import": "^0.4.3",
+    "@backstage/plugin-scaffolder": "^0.7.0",
+    "@backstage/plugin-techdocs": "^0.6.0",
+    "@backstage/catalog-model": "^0.7.3",
+    "@backstage/plugin-circleci": "^0.2.11",
+    "@backstage/plugin-tech-radar": "^0.3.7",
+    "@backstage/plugin-github-actions": "^0.3.5",
+    "@backstage/plugin-user-settings": "^0.2.7",
+    "@backstage/plugin-search": "^0.3.3",
+    "@backstage/test-utils": "^0.1.8",
+    "@backstage/theme": "^0.2.3",
     "history": "^5.0.0",
@@ -48,2 +48,3 @@
     "lint": "backstage-cli lint",
+    "clean": "backstage-cli clean",
     "test:e2e": "cross-env PORT=3001 start-server-and-test start http://localhost:3001 cy:dev",
@@ -64,3 +65,6 @@
     ]
-  }
+  },
+  "files": [
+    "dist"
+  ]
 }
diff --git a/packages/app/public/index.html b/packages/app/public/index.html
index ea9208c..5653173 100644
--- a/packages/app/public/index.html
+++ b/packages/app/public/index.html
@@ -50,2 +50,18 @@
     <title><%= app.title %></title>
+    <% if (app.googleAnalyticsTrackingId && typeof app.googleAnalyticsTrackingId
+    === 'string') { %>
+    <script
+      async
+      src="https://www.googletagmanager.com/gtag/js?id=<%= app.googleAnalyticsTrackingId %>"
+    ></script>
+    <script>
+      window.dataLayer = window.dataLayer || [];
+      function gtag() {
+        dataLayer.push(arguments);
+      }
+      gtag('js', new Date());
+
+      gtag('config', '<%= app.googleAnalyticsTrackingId %>');
+    </script>
+    <% } %>
   </head>
diff --git a/packages/app/src/App.test.tsx b/packages/app/src/App.test.tsx
index 21a2eaa..82bc479 100644
--- a/packages/app/src/App.test.tsx
+++ b/packages/app/src/App.test.tsx
@@ -6,5 +6,5 @@ describe('App', () => {
   it('should render', async () => {
-    Object.defineProperty(process.env, 'APP_CONFIG', {
-      configurable: true,
-      value: [
+    process.env = {
+      NODE_ENV: 'test',
+      APP_CONFIG: [
         {
@@ -19,4 +19,4 @@ describe('App', () => {
         },
-      ],
-    });
+      ] as any,
+    };
 
diff --git a/packages/app/src/App.tsx b/packages/app/src/App.tsx
index 9449ac6..b2c9d10 100644
--- a/packages/app/src/App.tsx
+++ b/packages/app/src/App.tsx
@@ -1,19 +1,26 @@
-import React, { FC } from 'react';
 import {
-  createApp,
   AlertDisplay,
+  createApp,
+  FlatRoutes,
   OAuthRequestDialog,
   SidebarPage,
-  createRouteRef,
 } from '@backstage/core';
+import { apiDocsPlugin, ApiExplorerPage } from '@backstage/plugin-api-docs';
+import {
+  CatalogEntityPage,
+  CatalogIndexPage,
+  catalogPlugin,
+} from '@backstage/plugin-catalog';
+import { CatalogImportPage } from '@backstage/plugin-catalog-import';
+import { ScaffolderPage, scaffolderPlugin } from '@backstage/plugin-scaffolder';
+import { SearchPage } from '@backstage/plugin-search';
+import { TechRadarPage } from '@backstage/plugin-tech-radar';
+import { TechdocsPage } from '@backstage/plugin-techdocs';
+import { UserSettingsPage } from '@backstage/plugin-user-settings';
+import React from 'react';
+import { Navigate, Route } from 'react-router';
 import { apis } from './apis';
+import { EntityPage } from './components/catalog/EntityPage';
 import * as plugins from './plugins';
 import { AppSidebar } from './sidebar';
-import { Route, Routes, Navigate } from 'react-router';
-import { Router as CatalogRouter } from '@backstage/plugin-catalog';
-import { Router as DocsRouter } from '@backstage/plugin-techdocs';
-import { Router as RegisterComponentRouter } from '@backstage/plugin-register-component';
-import { Router as TechRadarRouter } from '@backstage/plugin-tech-radar';
-
-import { EntityPage } from './components/catalog/EntityPage';
 
@@ -22,2 +29,10 @@ const app = createApp({
   plugins: Object.values(plugins),
+  bindRoutes({ bind }) {
+    bind(catalogPlugin.externalRoutes, {
+      createComponent: scaffolderPlugin.routes.root,
+    });
+    bind(apiDocsPlugin.externalRoutes, {
+      createComponent: scaffolderPlugin.routes.root,
+    });
+  },
 });
@@ -26,11 +41,4 @@ const AppProvider = app.getProvider();
 const AppRouter = app.getRouter();
-const deprecatedAppRoutes = app.getRoutes();
 
-const catalogRouteRef = createRouteRef({
-  path: '/catalog',
-  title: 'Service Catalog',
-});
-
-
-const App: FC<{}> = () => (
+const App = () => (
   <AppProvider>
@@ -41,19 +49,22 @@ const App: FC<{}> = () => (
         <AppSidebar />
-        <Routes>
+        <FlatRoutes>
           <Navigate key="/" to="/catalog" />
+          <Route path="/catalog" element={<CatalogIndexPage />} />
           <Route
-            path="/catalog/*"
-            element={<CatalogRouter EntityPage={EntityPage} />}
-          />
-          <Route path="/docs/*" element={<DocsRouter />} />
+            path="/catalog/:namespace/:kind/:name"
+            element={<CatalogEntityPage />}
+          >
+            <EntityPage />
+          </Route>
+          <Route path="/docs" element={<TechdocsPage />} />
+          <Route path="/create" element={<ScaffolderPage />} />
+          <Route path="/api-docs" element={<ApiExplorerPage />} />
           <Route
             path="/tech-radar"
-            element={<TechRadarRouter width={1500} height={800} />}
-          />
-          <Route
-            path="/register-component"
-            element={<RegisterComponentRouter catalogRouteRef={catalogRouteRef} />}
+            element={<TechRadarPage width={1500} height={800} />}
           />
-          {deprecatedAppRoutes}
-        </Routes>
+          <Route path="/catalog-import" element={<CatalogImportPage />} />
+          <Route path="/search" element={<SearchPage />} />
+          <Route path="/settings" element={<UserSettingsPage />} />
+        </FlatRoutes>
       </SidebarPage>
diff --git a/packages/app/src/LogoFull.tsx b/packages/app/src/LogoFull.tsx
index d2b1bf1..2fb7674 100644
--- a/packages/app/src/LogoFull.tsx
+++ b/packages/app/src/LogoFull.tsx
@@ -16,3 +16,3 @@
 
-import React, { FC } from 'react';
+import React from 'react';
 import { makeStyles } from '@material-ui/core';
@@ -28,3 +28,3 @@ const useStyles = makeStyles({
 });
-const LogoFull: FC<{}> = () => {
+const LogoFull = () => {
   const classes = useStyles();
diff --git a/packages/app/src/LogoIcon.tsx b/packages/app/src/LogoIcon.tsx
index d70be3d..507e47d 100644
--- a/packages/app/src/LogoIcon.tsx
+++ b/packages/app/src/LogoIcon.tsx
@@ -16,3 +16,3 @@
 
-import React, { FC } from 'react';
+import React from 'react';
 import { makeStyles } from '@material-ui/core';
@@ -29,3 +29,3 @@ const useStyles = makeStyles({
 
-const LogoIcon: FC<{}> = () => {
+const LogoIcon = () => {
   const classes = useStyles();
diff --git a/packages/app/src/components/catalog/EntityPage.tsx b/packages/app/src/components/catalog/EntityPage.tsx
index 7d65b32..a3a3715 100644
--- a/packages/app/src/components/catalog/EntityPage.tsx
+++ b/packages/app/src/components/catalog/EntityPage.tsx
@@ -15,22 +15,27 @@
  */
+import { ApiEntity, Entity } from '@backstage/catalog-model';
+import { WarningPanel } from '@backstage/core';
 import {
-  Router as GitHubActionsRouter,
-  isPluginApplicableToEntity as isGitHubActionsAvailable,
-} from '@backstage/plugin-github-actions';
+  ApiDefinitionCard,
+  ConsumedApisCard, 
+  ConsumingComponentsCard, 
+  ProvidedApisCard, 
+  ProvidingComponentsCard
+} from '@backstage/plugin-api-docs';
+import {
+  AboutCard, EntityPageLayout,
+} from '@backstage/plugin-catalog';
 import {
-  Router as CircleCIRouter,
-  isPluginApplicableToEntity as isCircleCIAvailable,
+  useEntity
+} from '@backstage/plugin-catalog-react';
+import {
+  isPluginApplicableToEntity as isCircleCIAvailable, Router as CircleCIRouter
 } from '@backstage/plugin-circleci';
-import { Router as ApiDocsRouter } from '@backstage/plugin-api-docs';
-import { EmbeddedDocsRouter as DocsRouter } from '@backstage/plugin-techdocs';
-
-import React from 'react';
 import {
-  EntityPageLayout,
-  useEntity,
-  AboutCard,
-} from '@backstage/plugin-catalog';
-import { Entity } from '@backstage/catalog-model';
+  isPluginApplicableToEntity as isGitHubActionsAvailable, Router as GitHubActionsRouter
+} from '@backstage/plugin-github-actions';
+import { EmbeddedDocsRouter as DocsRouter } from '@backstage/plugin-techdocs';
 import { Grid } from '@material-ui/core';
-import { WarningPanel } from '@backstage/core';
+import React from 'react';
+
 
@@ -62,2 +67,13 @@ const OverviewContent = ({ entity }: { entity: Entity }) => (
 
+const ComponentApisContent = ({ entity }: { entity: Entity }) => (
+  <Grid container spacing={3} alignItems="stretch">
+    <Grid item md={6}>
+      <ProvidedApisCard entity={entity} />
+    </Grid>
+    <Grid item md={6}>
+      <ConsumedApisCard entity={entity} />
+    </Grid>
+  </Grid>
+);
+
 const ServiceEntityPage = ({ entity }: { entity: Entity }) => (
@@ -77,3 +93,3 @@ const ServiceEntityPage = ({ entity }: { entity: Entity }) => (
       title="API"
-      element={<ApiDocsRouter entity={entity} />}
+      element={<ComponentApisContent entity={entity} />}
     />
@@ -122,4 +138,3 @@ const DefaultEntityPage = ({ entity }: { entity: Entity }) => (
 
-export const EntityPage = () => {
-  const { entity } = useEntity();
+export const ComponentEntityPage = ({ entity }: { entity: Entity }) => {
   switch (entity?.spec?.type) {
@@ -133 +148,53 @@ export const EntityPage = () => {
 };
+
+const ApiOverviewContent = ({ entity }: { entity: Entity }) => (
+  <Grid container spacing={3}>
+    <Grid item md={6}>
+      <AboutCard entity={entity} />
+    </Grid>
+    <Grid container item md={12}>
+      <Grid item md={6}>
+        <ProvidingComponentsCard entity={entity} />
+      </Grid>
+      <Grid item md={6}>
+        <ConsumingComponentsCard entity={entity} />
+      </Grid>
+    </Grid>
+  </Grid>
+);
+
+const ApiDefinitionContent = ({ entity }: { entity: ApiEntity }) => (
+  <Grid container spacing={3}>
+    <Grid item xs={12}>
+      <ApiDefinitionCard apiEntity={entity} />
+    </Grid>
+  </Grid>
+);
+
+const ApiEntityPage = ({ entity }: { entity: Entity }) => (
+  <EntityPageLayout>
+    <EntityPageLayout.Content
+      path="/*"
+      title="Overview"
+      element={<ApiOverviewContent entity={entity} />}
+    />
+    <EntityPageLayout.Content
+      path="/definition/*"
+      title="Definition"
+      element={<ApiDefinitionContent entity={entity as ApiEntity} />}
+    />
+  </EntityPageLayout>
+);
+
+export const EntityPage = () => {
+  const { entity } = useEntity();
+
+  switch (entity?.kind?.toLowerCase()) {
+    case 'component':
+      return <ComponentEntityPage entity={entity} />;
+    case 'api':
+      return <ApiEntityPage entity={entity} />;
+    default:
+      return <DefaultEntityPage entity={entity} />;
+  }
+};
diff --git a/packages/app/src/plugins.ts b/packages/app/src/plugins.ts
index c787ac2..28b42d5 100644
--- a/packages/app/src/plugins.ts
+++ b/packages/app/src/plugins.ts
@@ -1,9 +1,10 @@
+export { plugin as ApiDocs } from '@backstage/plugin-api-docs';
 export { plugin as CatalogPlugin } from '@backstage/plugin-catalog';
-export { plugin as RegisterComponent } from '@backstage/plugin-register-component';
+export { plugin as CatalogImport } from '@backstage/plugin-catalog-import';
+export { plugin as Circleci } from '@backstage/plugin-circleci';
+export { plugin as GithubActions } from '@backstage/plugin-github-actions';
 export { plugin as ScaffolderPlugin } from '@backstage/plugin-scaffolder';
 export { plugin as TechDocsPlugin } from '@backstage/plugin-techdocs';
-export { plugin as Explore } from '@backstage/plugin-explore';
-export { plugin as Circleci } from '@backstage/plugin-circleci';
-export { plugin as LighthousePlugin } from '@backstage/plugin-lighthouse';
 export { plugin as TechRadar } from '@backstage/plugin-tech-radar';
-export { plugin as GithubActions } from '@backstage/plugin-github-actions';
+export { plugin as UserSettings } from '@backstage/plugin-user-settings';
+
diff --git a/packages/app/src/sidebar.tsx b/packages/app/src/sidebar.tsx
index 9013476..9f7973c 100644
--- a/packages/app/src/sidebar.tsx
+++ b/packages/app/src/sidebar.tsx
@@ -1,7 +1,6 @@
-import React, { FC, useContext } from 'react';
+import React, { useContext } from 'react';
 import HomeIcon from '@material-ui/icons/Home';
 import LibraryBooks from '@material-ui/icons/LibraryBooks';
+import ExtensionIcon from '@material-ui/icons/Extension';
 import CreateComponentIcon from '@material-ui/icons/AddCircleOutline';
-import BuildIcon from '@material-ui/icons/BuildRounded';
-import RuleIcon from '@material-ui/icons/AssignmentTurnedIn';
 import MapIcon from '@material-ui/icons/MyLocation';
@@ -21,22 +20,4 @@ import {
 } from '@backstage/core';
+import { SidebarSearch } from '@backstage/plugin-search';
 
-export const AppSidebar = () => (
-  <Sidebar>
-    <SidebarLogo />
-    <SidebarDivider />
-    {/* Global nav, not org-specific */}
-    <SidebarItem icon={HomeIcon} to="./" text="Home" />
-    <SidebarItem icon={LibraryBooks} to="/docs" text="Docs" />
-    <SidebarItem icon={CreateComponentIcon} to="create" text="Create..." />
-    <SidebarDivider />
-    <SidebarItem icon={MapIcon} to="tech-radar" text="Tech Radar" />
-    <SidebarItem icon={RuleIcon} to="lighthouse" text="Lighthouse" />
-    <SidebarItem icon={BuildIcon} to="circleci" text="CircleCI" />
-    {/* End global nav */}
-    <SidebarDivider />
-    <SidebarSpace />
-    <SidebarDivider />
-    <SidebarSettings />
-  </Sidebar>
-);
 
@@ -57,3 +38,3 @@ const useSidebarLogoStyles = makeStyles({
 
-const SidebarLogo: FC<{}> = () => {
+const SidebarLogo = () => {
   const classes = useSidebarLogoStyles();
@@ -74 +55,21 @@ const SidebarLogo: FC<{}> = () => {
 };
+
+export const AppSidebar = () => (
+  <Sidebar>
+    <SidebarLogo />
+    <SidebarSearch />
+    <SidebarDivider />
+    {/* Global nav, not org-specific */}
+    <SidebarItem icon={HomeIcon} to="./" text="Home" />
+    <SidebarItem icon={ExtensionIcon} to="api-docs" text="APIs" />
+    <SidebarItem icon={LibraryBooks} to="/docs" text="Docs" />
+    <SidebarItem icon={CreateComponentIcon} to="create" text="Create..." />
+    <SidebarDivider />
+    <SidebarItem icon={MapIcon} to="tech-radar" text="Tech Radar" />
+    {/* End global nav */}
+    <SidebarDivider />
+    <SidebarSpace />
+    <SidebarDivider />
+    <SidebarSettings />
+  </Sidebar>
+);
diff --git a/packages/backend/Dockerfile b/packages/backend/Dockerfile
index 93929ce..acef405 100644
--- a/packages/backend/Dockerfile
+++ b/packages/backend/Dockerfile
@@ -1,4 +1,15 @@
-FROM node:12-buster
+# This dockerfile builds an image for the backend package.
+# It should be executed with the root of the repo as docker context.
+#
+# Before building this image, be sure to have run the following commands in the repo root:
+#
+# yarn install
+# yarn tsc
+# yarn build
+#
+# Once the commands have been run, you can build the image using `yarn build-image`
 
-WORKDIR /usr/src/app
+FROM node:14-buster-slim
+
+WORKDIR /app
 
@@ -7,10 +18,9 @@ WORKDIR /usr/src/app
 # and along with yarn.lock and the root package.json, that's enough to run yarn install.
-ADD yarn.lock package.json skeleton.tar ./
+ADD yarn.lock package.json packages/backend/dist/skeleton.tar.gz ./
 
-RUN yarn install --frozen-lockfile --production
+RUN yarn install --frozen-lockfile --production --network-timeout 300000 && rm -rf "$(yarn cache dir)"
 
-# This will copy the contents of the dist-workspace when running the build-image command.
-# Do not use this Dockerfile outside of that command, as it will copy in the source code instead.
-COPY . .
+# Then copy the rest of the backend bundle, along with any other files we might want.
+ADD packages/backend/dist/bundle.tar.gz app-config.yaml ./
 
-CMD ["node", "packages/backend"]
+CMD ["node", "packages/backend", "--config", "app-config.yaml"]
diff --git a/packages/backend/package.json b/packages/backend/package.json
index a6ddda7..f3717a3 100644
--- a/packages/backend/package.json
+++ b/packages/backend/package.json
@@ -10,4 +10,4 @@
   "scripts": {
-    "build": "backstage-cli backend:build",
-    "build-image": "backstage-cli backend:build-image --build --tag example-backend",
+    "build": "backstage-cli backend:bundle",
+    "build-image": "docker build ../.. -f Dockerfile --tag backstage",
     "start": "backstage-cli backend:dev",
@@ -19,14 +19,16 @@
   "dependencies": {
-    "@backstage/backend-common": "^0.2.0",
-    "@backstage/catalog-model": "^0.2.0",
-    "@backstage/config": "^0.1.1",
-    "@backstage/plugin-auth-backend": "^0.2.0",
-    "@backstage/plugin-catalog-backend": "^0.2.0",
-    "@backstage/plugin-proxy-backend": "^0.2.0",
-    "@backstage/plugin-rollbar-backend": "^0.1.2",
-    "@backstage/plugin-scaffolder-backend": "^0.2.0",
-    "@backstage/plugin-techdocs-backend": "^0.2.0",
-    "@octokit/rest": "^18.0.0",
-    "@gitbeaker/node": "^23.5.0",
-    "dockerode": "^3.2.0",
+    "app": "0.0.0",
+    "@backstage/backend-common": "^0.5.5",
+    "@backstage/catalog-model": "^0.7.3",
+    "@backstage/catalog-client": "^0.3.6",
+    "@backstage/config": "^0.1.3",
+    "@backstage/plugin-app-backend": "^0.3.8",
+    "@backstage/plugin-auth-backend": "^0.3.3",
+    "@backstage/plugin-catalog-backend": "^0.6.4",
+    "@backstage/plugin-proxy-backend": "^0.2.5",
+    "@backstage/plugin-scaffolder-backend": "^0.9.0",
+    "@backstage/plugin-techdocs-backend": "^0.6.3",
+    "@gitbeaker/node": "^28.0.2",
+    "@octokit/rest": "^18.0.12",
+    "dockerode": "^3.2.1",
     "express": "^4.17.1",
@@ -34,3 +36,3 @@
     "knex": "^0.21.6",
-    "sqlite3": "^4.2.0",
+    "sqlite3": "^5.0.0",
     "winston": "^3.2.1"
@@ -38,8 +40,10 @@
   "devDependencies": {
-    "@backstage/cli": "^0.2.0",
-    "@types/dockerode": "^2.5.32",
+    "@backstage/cli": "^0.6.3",
+    "@types/dockerode": "^3.2.1",
     "@types/express": "^4.17.6",
-    "@types/express-serve-static-core": "^4.17.5",
-    "@types/helmet": "^0.0.47"
-  }
+    "@types/express-serve-static-core": "^4.17.5"
+  },
+  "files": [
+    "dist"
+  ]
 }
diff --git a/packages/backend/src/index.ts b/packages/backend/src/index.ts
index 51de1ad..80dc623 100644
--- a/packages/backend/src/index.ts
+++ b/packages/backend/src/index.ts
@@ -20,2 +20,3 @@ import {
 import { Config } from '@backstage/config';
+import app from './plugins/app';
 import auth from './plugins/auth';
@@ -55,2 +56,3 @@ async function main() {
   const techdocsEnv = useHotMemoize(module, () => createEnv('techdocs'));
+  const appEnv = useHotMemoize(module, () => createEnv('app'));
 
@@ -66,3 +68,4 @@ async function main() {
     .loadConfig(config)
-    .addRouter('/api', apiRouter);
+    .addRouter('/api', apiRouter)
+    .addRouter('', await app(appEnv));
 
diff --git a/packages/backend/src/plugins/app.ts b/packages/backend/src/plugins/app.ts
new file mode 100644
index 0000000..07fb04f
--- /dev/null
+++ b/packages/backend/src/plugins/app.ts
@@ -0,0 +1,14 @@
+import { createRouter } from '@backstage/plugin-app-backend';
+import { Router } from 'express';
+import { PluginEnvironment } from '../types';
+
+export default async function createPlugin({
+  logger,
+  config,
+}: PluginEnvironment): Promise<Router> {
+  return await createRouter({
+    logger,
+    config,
+    appPackageName: 'app',
+  });
+}
diff --git a/packages/backend/src/plugins/auth.ts b/packages/backend/src/plugins/auth.ts
index fe19855..5216510 100644
--- a/packages/backend/src/plugins/auth.ts
+++ b/packages/backend/src/plugins/auth.ts
@@ -1,2 +1,3 @@
 import { createRouter } from '@backstage/plugin-auth-backend';
+import { Router } from 'express';
 import { PluginEnvironment } from '../types';
@@ -8,3 +9,3 @@ export default async function createPlugin({
   discovery,
-}: PluginEnvironment) {
+}: PluginEnvironment): Promise<Router> {
   return await createRouter({ logger, config, database, discovery });
diff --git a/packages/backend/src/plugins/catalog.ts b/packages/backend/src/plugins/catalog.ts
index 10ac116..883b70c 100644
--- a/packages/backend/src/plugins/catalog.ts
+++ b/packages/backend/src/plugins/catalog.ts
@@ -4,7 +4,8 @@ import {
   createRouter,
-  runPeriodically,
+  runPeriodically
 } from '@backstage/plugin-catalog-backend';
+import { Router } from 'express';
 import { PluginEnvironment } from '../types';
 
-export default async function createPlugin(env: PluginEnvironment) {
+export default async function createPlugin(env: PluginEnvironment): Promise<Router> {
   const builder = new CatalogBuilder(env);
diff --git a/packages/backend/src/plugins/proxy.ts b/packages/backend/src/plugins/proxy.ts
index 388d3fc..506f6d9 100644
--- a/packages/backend/src/plugins/proxy.ts
+++ b/packages/backend/src/plugins/proxy.ts
@@ -1,3 +1,3 @@
-// @ts-ignore
 import { createRouter } from '@backstage/plugin-proxy-backend';
+import { Router } from 'express';
 import { PluginEnvironment } from '../types';
@@ -8,3 +8,3 @@ export default async function createPlugin({
   discovery,
-}: PluginEnvironment) {
+}: PluginEnvironment): Promise<Router> {
   return await createRouter({ logger, config, discovery });
diff --git a/packages/backend/src/plugins/scaffolder.ts b/packages/backend/src/plugins/scaffolder.ts
index 8de1592..a3416c5 100644
--- a/packages/backend/src/plugins/scaffolder.ts
+++ b/packages/backend/src/plugins/scaffolder.ts
@@ -1,19 +1,14 @@
+import { SingleHostDiscovery } from '@backstage/backend-common';
+import { CatalogClient } from '@backstage/catalog-client';
 import {
   CookieCutter,
+  CreateReactAppTemplater,
   createRouter,
-  FilePreparer,
-  GithubPreparer,
-  GitlabPreparer,
   Preparers,
   Publishers,
-  GithubPublisher,
-  GitlabPublisher,
-  CreateReactAppTemplater,
-  Templaters,
-  RepoVisibilityOptions,
+  Templaters
 } from '@backstage/plugin-scaffolder-backend';
-import { Octokit } from '@octokit/rest';
-import { Gitlab } from '@gitbeaker/node';
-import type { PluginEnvironment } from '../types';
 import Docker from 'dockerode';
+import { Router } from 'express';
+import type { PluginEnvironment } from '../types';
 
@@ -22,3 +17,5 @@ export default async function createPlugin({
   config,
-}: PluginEnvironment) {
+  database,
+  reader,
+}: PluginEnvironment): Promise<Router> {
   const cookiecutterTemplater = new CookieCutter();
@@ -26,2 +23,3 @@ export default async function createPlugin({
   const templaters = new Templaters();
+
   templaters.register('cookiecutter', cookiecutterTemplater);
@@ -29,72 +27,10 @@ export default async function createPlugin({
 
-  const filePreparer = new FilePreparer();
-  const githubPreparer = new GithubPreparer();
-  const gitlabPreparer = new GitlabPreparer(config);
-  const preparers = new Preparers();
-
-  preparers.register('file', filePreparer);
-  preparers.register('github', githubPreparer);
-  preparers.register('gitlab', gitlabPreparer);
-  preparers.register('gitlab/api', gitlabPreparer);
-
-  const publishers = new Publishers();
+  const preparers = await Preparers.fromConfig(config, { logger });
+  const publishers = await Publishers.fromConfig(config, { logger });
 
-  const githubConfig = config.getOptionalConfig('scaffolder.github');
-
-  if (githubConfig) {
-    try {
-      const repoVisibility = githubConfig.getString(
-        'visibility',
-      ) as RepoVisibilityOptions;
-
-      const githubToken = githubConfig.getString('token');
-      const githubHost = githubConfig.getOptionalString('host');
-      const githubClient = new Octokit({ auth: githubToken, baseUrl: githubHost });
-      const githubPublisher = new GithubPublisher({
-        client: githubClient,
-        token: githubToken,
-        repoVisibility,
-      });
-      publishers.register('file', githubPublisher);
-      publishers.register('github', githubPublisher);
-    } catch (e) {
-      const providerName = 'github';
-      if (process.env.NODE_ENV !== 'development') {
-        throw new Error(
-          `Failed to initialize ${providerName} scaffolding provider, ${e.message}`,
-        );
-      }
-
-      logger.warn(
-        `Skipping ${providerName} scaffolding provider, ${e.message}`,
-      );
-    }
-  }
-
-  const gitLabConfig = config.getOptionalConfig('scaffolder.gitlab.api');
-  if (gitLabConfig) {
-    try {
-      const gitLabToken = gitLabConfig.getString('token');
-      const gitLabClient = new Gitlab({
-        host: gitLabConfig.getOptionalString('baseUrl'),
-        token: gitLabToken,
-      });
-      const gitLabPublisher = new GitlabPublisher(gitLabClient, gitLabToken);
-      publishers.register('gitlab', gitLabPublisher);
-      publishers.register('gitlab/api', gitLabPublisher);
-    } catch (e) {
-      const providerName = 'gitlab';
-      if (process.env.NODE_ENV !== 'development') {
-        throw new Error(
-          `Failed to initialize ${providerName} scaffolding provider, ${e.message}`,
-        );
-      }
+  const dockerClient = new Docker();
 
-      logger.warn(
-        `Skipping ${providerName} scaffolding provider, ${e.message}`,
-      );
-    }
-  }
+  const discovery = SingleHostDiscovery.fromConfig(config);
+  const catalogClient = new CatalogClient({ discoveryApi: discovery });
 
-  const dockerClient = new Docker();
   return await createRouter({
@@ -106,2 +42,5 @@ export default async function createPlugin({
     dockerClient,
+    database,
+    catalogClient,
+    reader
   });
diff --git a/packages/backend/src/plugins/techdocs.ts b/packages/backend/src/plugins/techdocs.ts
index 5506228..0ba08ce 100644
--- a/packages/backend/src/plugins/techdocs.ts
+++ b/packages/backend/src/plugins/techdocs.ts
@@ -2,11 +2,10 @@ import {
   createRouter,
-  DirectoryPreparer,
-  CommonGitPreparer,
-  Preparers,
-  Generators,
-  LocalPublish,
-  TechdocsGenerator,
+
+  Generators, Preparers,
+
+  Publisher
 } from '@backstage/plugin-techdocs-backend';
-import { PluginEnvironment } from '../types';
 import Docker from 'dockerode';
+import { Router } from 'express';
+import { PluginEnvironment } from '../types';
 
@@ -16,18 +15,24 @@ export default async function createPlugin({
   discovery,
-}: PluginEnvironment) {
-  const generators = new Generators();
-  const techdocsGenerator = new TechdocsGenerator(logger, config);
-
-  generators.register('techdocs', techdocsGenerator);
-
-  const preparers = new Preparers();
-  const directoryPreparer = new DirectoryPreparer(logger);
-  const commonGitPreparer = new CommonGitPreparer(logger);
+  reader,
+}: PluginEnvironment): Promise<Router> {
+  // Preparers are responsible for fetching source files for documentation.
+  const preparers = await Preparers.fromConfig(config, {
+    logger,
+    reader,
+  });
 
-  preparers.register('dir', directoryPreparer);
-  preparers.register('github', commonGitPreparer);
-  preparers.register('gitlab', commonGitPreparer);
+  // Generators are used for generating documentation sites.
+  const generators = await Generators.fromConfig(config, {
+    logger,
+  });
 
-  const publisher = new LocalPublish(logger);
+  // Publisher is used for
+  // 1. Publishing generated files to storage
+  // 2. Fetching files from storage and passing them to TechDocs frontend.
+  const publisher = await Publisher.fromConfig(config, {
+    logger,
+    discovery,
+  });
 
+  // Docker client (conditionally) used by the generators, based on techdocs.generators config.
   const dockerClient = new Docker();
